<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小前风</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://annilq.github.io/"/>
  <updated>2019-08-02T01:52:16.573Z</updated>
  <id>https://annilq.github.io/</id>
  
  <author>
    <name>annilq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A Basic 38 Line Reimplementation of Redux</title>
    <link href="https://annilq.github.io/2019/03/14/redux/"/>
    <id>https://annilq.github.io/2019/03/14/redux/</id>
    <published>2019-03-14T05:53:10.000Z</published>
    <updated>2019-08-02T01:52:16.573Z</updated>
    
    <content type="html"><![CDATA[<p>原文:<a href="https://repl.it/@dericgw/ReduxRecreated" target="_blank" rel="noopener">A Basic 38 Line Reimplementation of Redux</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer, initialState</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> currentState = initialState;</span><br><span class="line">  <span class="keyword">const</span> listeners = [];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> currentState;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">listener</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> listener !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'A listener must be a function'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    listeners.push(listener);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unsubscribe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> index = listeners.indexOf(listener);</span><br><span class="line">      listeners.splice(index, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">    currentState = reducer(currentState, action);</span><br><span class="line">    </span><br><span class="line">    listeners.forEach(<span class="function"><span class="params">listener</span> =&gt;</span> listener());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> action;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dispatch(&#123; <span class="attr">type</span>: <span class="string">'INIT'</span>&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getState,</span><br><span class="line">    subscribe,</span><br><span class="line">    dispatch,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// End the Redux implementation</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Reducer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = &#123; firstName: <span class="string">'John'</span>, lastName: <span class="string">'Smith'</span> &#125;, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'UPDATE_FIRSTNAME'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">          ...state,</span><br><span class="line">          firstName: action.payload,</span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'UPDATE_LASTNAME'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        lastName: action.payload,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Action creators</span></span><br><span class="line"><span class="keyword">const</span> updateFirstName = <span class="function"><span class="params">firstName</span> =&gt;</span> (&#123;</span><br><span class="line">  type: <span class="string">'UPDATE_FIRSTNAME'</span>,</span><br><span class="line">  payload: firstName,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateLastName = <span class="function"><span class="params">lastName</span> =&gt;</span> (&#123;</span><br><span class="line">  type: <span class="string">'UPDATE_LASTNAME'</span>,</span><br><span class="line">  payload: lastName,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the store</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get initial state</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`INITIAL STATE: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(store.getState())&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Subscribe to state changes</span></span><br><span class="line"><span class="keyword">const</span> unsub = store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Subscription fired`</span>, <span class="built_in">JSON</span>.stringify(store.getState()));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dispatch an action</span></span><br><span class="line">store.dispatch(updateFirstName(<span class="string">'Tommy'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Unsubscribe our listener</span></span><br><span class="line">unsub();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dispatch another action</span></span><br><span class="line">store.dispatch(updateLastName(<span class="string">'Watson'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the current state</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(store.getState()));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文:&lt;a href=&quot;https://repl.it/@dericgw/ReduxRecreated&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;A Basic 38 Line Reimplementation of Redux&lt;/a&gt;&lt;/p&gt;
&lt;fi
      
    
    </summary>
    
    
      <category term="Redux" scheme="https://annilq.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>2019</title>
    <link href="https://annilq.github.io/2019/02/20/2019/"/>
    <id>https://annilq.github.io/2019/02/20/2019/</id>
    <published>2019-02-20T03:22:01.000Z</published>
    <updated>2019-08-02T01:52:16.572Z</updated>
    
    <content type="html"><![CDATA[<p>2019年也开始很久啦，最近生活和工作的状态还是没有调整过来，整个人有点烦躁，希望借此机会可以适当发泄一下，而且也期许一下2019的生活</p><p>整个18年现在回想起来过的比较忙乱又单调，现在回想起来也不过是把新房装修了下，竟然如此伤神，好在娃娃还算健康，操心的事情不是很多，这一年没有怎么看电影，没有怎么读书学习，也没有怎么运动，所以感觉这一年的生活状态和以前有很大不同，有点略微不适应，要把精力分享给家里多一些，不过听到仔仔叫爸爸还是蛮开心的。</p><p>今年仔仔的妹妹（希望是）二丫马上就来了，压力还是蛮大，自己也没有找到舒适区，没想到曾经中二的人也快成了两个孩子的爸爸，希望自己可以慢慢适应这个角色，吴老师这两年带小孩儿也比较辛苦，希望以后可以多多沟通，少点拌嘴，多些理解，我自己也努力找回状态，在工作、生活学习能够更进一步，顺便找时间把驾照也考了，不然出门太麻烦了，三十而立，希望自己能够成长一些。</p><p>总结也是碎碎的~~~</p><p>最后希望家人和朋友都能够身体健康，诸事顺心，就这样，加油！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2019年也开始很久啦，最近生活和工作的状态还是没有调整过来，整个人有点烦躁，希望借此机会可以适当发泄一下，而且也期许一下2019的生活&lt;/p&gt;
&lt;p&gt;整个18年现在回想起来过的比较忙乱又单调，现在回想起来也不过是把新房装修了下，竟然如此伤神，好在娃娃还算健康，操心的事情不
      
    
    </summary>
    
    
      <category term="2019" scheme="https://annilq.github.io/tags/2019/"/>
    
  </entry>
  
  <entry>
    <title>React验证登录权限</title>
    <link href="https://annilq.github.io/2018/05/21/react-auth/"/>
    <id>https://annilq.github.io/2018/05/21/react-auth/</id>
    <published>2018-05-21T02:50:15.000Z</published>
    <updated>2018-05-21T13:01:33.717Z</updated>
    
    <content type="html"><![CDATA[<h3 id="react-native-app与react-app-权限验证"><a href="#react-native-app与react-app-权限验证" class="headerlink" title="react native app与react app 权限验证"></a>react native app与react app 权限验证</h3><ol><li>react native app完全由程序控制跳转，react app可以手动跳转</li><li>react native app跳转依赖 <code>React Navigation</code>,react app跳转依赖 <code>React Router</code></li><li>跳转方式<ol><li>Redux integration</li><li>Redirect<h4 id="Redux-integration"><a href="#Redux-integration" class="headerlink" title="Redux integration"></a>Redux integration</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  View,</span><br><span class="line">  Text,</span><br><span class="line">  ActivityIndicator,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  AsyncStorage</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"react-native"</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthLoadingScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>._bootstrapAsync();</span><br><span class="line">  &#125;</span><br><span class="line">  _bootstrapAsync = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> userToken = <span class="keyword">await</span> AsyncStorage.getItem(<span class="string">"userToken"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"userToken"</span>, userToken);</span><br><span class="line">    <span class="keyword">this</span>.props.navigation.dispatch(&#123; <span class="attr">type</span>: userToken ? <span class="string">"Login"</span> : <span class="string">"Logout"</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;ActivityIndicator /&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">const styles = StyleSheet.create(&#123;</span></span><br><span class="line"><span class="regexp">  container: &#123;</span></span><br><span class="line"><span class="regexp">    flex: 1,</span></span><br><span class="line"><span class="regexp">    alignItems: "center",</span></span><br><span class="line"><span class="regexp">    justifyContent: "center"</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp">export default AuthLoadingScreen;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="Redirect重定向"><a href="#Redirect重定向" class="headerlink" title="Redirect重定向"></a>Redirect重定向</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Redirect, Route &#125; <span class="keyword">from</span> <span class="string">"react-router"</span>;</span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">&#123; isLogin &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    isLogin</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">@connect(mapStateToProps)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Auth</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; isLogin &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> isLogin ? (</span><br><span class="line">      &lt;Route exact path=<span class="string">"/"</span> render=&#123;() =&gt; <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">"/dashboard"</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="xml">    ) : (</span></span><br><span class="line">      &lt;Redirect to="/login" /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Auth;</span><br></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li><a href="https://medium.com/@kelleyannerose/react-native-activityindicator-for-a-quick-easy-loading-animation-593c06c044dc" target="_blank" rel="noopener">React Native ActivityIndicator for a Quick &amp; Easy Loading Animation</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;react-native-app与react-app-权限验证&quot;&gt;&lt;a href=&quot;#react-native-app与react-app-权限验证&quot; class=&quot;headerlink&quot; title=&quot;react native app与react app 权限验
      
    
    </summary>
    
    
      <category term="react" scheme="https://annilq.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>build your own react</title>
    <link href="https://annilq.github.io/2018/05/04/react/"/>
    <id>https://annilq.github.io/2018/05/04/react/</id>
    <published>2018-05-04T07:48:15.000Z</published>
    <updated>2018-05-21T13:06:18.457Z</updated>
    
    <content type="html"><![CDATA[<h3 id="先上react-js小书关于前端组件的代码"><a href="#先上react-js小书关于前端组件的代码" class="headerlink" title="先上react.js小书关于前端组件的代码"></a>先上react.js小书关于前端组件的代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createDOMFromString = <span class="function">(<span class="params">domString</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">  div.innerHTML = domString</span><br><span class="line">  <span class="keyword">return</span> div</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    setState (state) &#123;</span><br><span class="line">      <span class="keyword">const</span> oldEl = <span class="keyword">this</span>.el</span><br><span class="line">      <span class="keyword">this</span>.state = state</span><br><span class="line">      <span class="keyword">this</span>._renderDOM()</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.onStateChange) <span class="keyword">this</span>.onStateChange(oldEl, <span class="keyword">this</span>.el)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _renderDOM () &#123;</span><br><span class="line">      <span class="keyword">this</span>.el = createDOMFromString(<span class="keyword">this</span>.render())</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.el</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">LikeButton</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> (props) &#123;</span><br><span class="line">      <span class="keyword">super</span>(props)</span><br><span class="line">      <span class="keyword">this</span>.state = &#123; <span class="attr">isLiked</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onClick () &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        isLiked: !<span class="keyword">this</span>.state.isLiked</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;button class='like-btn' style="background-color: <span class="subst">$&#123;<span class="keyword">this</span>.props.bgColor&#125;</span>"&gt;</span></span><br><span class="line"><span class="string">          &lt;span class='like-text'&gt;</span></span><br><span class="line"><span class="string">            <span class="subst">$&#123;<span class="keyword">this</span>.state.isLiked ? <span class="string">'取消'</span> : <span class="string">'点赞'</span>&#125;</span></span></span><br><span class="line"><span class="string">          &lt;/span&gt;</span></span><br><span class="line"><span class="string">          &lt;span&gt;👍&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;/button&gt;</span></span><br><span class="line"><span class="string">      `</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">const</span> mount = <span class="function">(<span class="params">component, wrapper</span>) =&gt;</span> &#123;</span><br><span class="line">    wrapper.appendChild(component._renderDOM())</span><br><span class="line">    component.onStateChange = <span class="function">(<span class="params">oldEl, newEl</span>) =&gt;</span> &#123;</span><br><span class="line">      wrapper.insertBefore(newEl, oldEl)</span><br><span class="line">      wrapper.removeChild(oldEl)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">mount(<span class="keyword">new</span> LikeButton(&#123; <span class="attr">bgColor</span>: <span class="string">'red'</span> &#125;), wrapper)</span><br></pre></td></tr></table></figure><h4 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h4><ol><li><code>createDOMFromString</code>方法用于将dom字符串转成dom</li><li><code>mount</code>方法用于将组件与页面的dom元素<code>wrapper</code>初始化关联<ol><li><code>onStateChange</code>应该设置实例组件上面</li></ol></li><li>首先公共的部分抽象成一个component组件，其中包括两个方法<ol><li><code>setState</code>子组件调用时，根据state重新渲染组件</li><li><code>_renderDOM</code> 根据state变化调用<code>render</code>方法重新渲染组件</li><li>实例组件必须有实例<code>render</code>方法用于父组件调用</li></ol></li></ol><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li><a href="https://medium.com/@sweetpalma/gooact-react-in-160-lines-of-javascript-44e0742ad60f" target="_blank" rel="noopener">React in 160 lines of JavaScript</a></li><li><a href="http://huziketang.mangojuice.top/books/react/" target="_blank" rel="noopener">React.js 小书</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;先上react-js小书关于前端组件的代码&quot;&gt;&lt;a href=&quot;#先上react-js小书关于前端组件的代码&quot; class=&quot;headerlink&quot; title=&quot;先上react.js小书关于前端组件的代码&quot;&gt;&lt;/a&gt;先上react.js小书关于前端组件的代码&lt;/
      
    
    </summary>
    
    
      <category term="react" scheme="https://annilq.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>100行实现JavaScript路由器</title>
    <link href="https://annilq.github.io/2018/03/16/router/"/>
    <id>https://annilq.github.io/2018/03/16/router/</id>
    <published>2018-03-16T03:44:01.000Z</published>
    <updated>2018-05-21T13:01:33.720Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接<br><a href="http://krasimirtsonev.com/blog/article/A-modern-JavaScript-router-in-100-lines-history-api-pushState-hash-url" target="_blank" rel="noopener">A modern JavaScript router in 100 lines</a><br><a href="https://tylermcginnis.com/build-your-own-react-router-v4/" target="_blank" rel="noopener">Build your own React Router v4</a></p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li>配置路由</li><li>添加路由</li><li>监听路由<ol><li>定时监听</li><li>hashChange</li><li>popstate</li></ol></li></ol><h3 id="一个基本路由实现的代码"><a href="#一个基本路由实现的代码" class="headerlink" title="一个基本路由实现的代码"></a>一个基本路由实现的代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Router = &#123;</span><br><span class="line">    routes: [],</span><br><span class="line">    mode: <span class="literal">null</span>,</span><br><span class="line">    root: <span class="string">'/'</span>,</span><br><span class="line">    config: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mode = options &amp;&amp; options.mode &amp;&amp; options.mode == <span class="string">'history'</span> </span><br><span class="line">                    &amp;&amp; !!(history.pushState) ? <span class="string">'history'</span> : <span class="string">'hash'</span>;</span><br><span class="line">        <span class="keyword">this</span>.root = options &amp;&amp; options.root ? <span class="string">'/'</span> + <span class="keyword">this</span>.clearSlashes(options.root) + <span class="string">'/'</span> : <span class="string">'/'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    getFragment: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> fragment = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.mode === <span class="string">'history'</span>) &#123;</span><br><span class="line">            fragment = <span class="keyword">this</span>.clearSlashes(<span class="built_in">decodeURI</span>(location.pathname + location.search));</span><br><span class="line">            fragment = fragment.replace(<span class="regexp">/\?(.*)$/</span>, <span class="string">''</span>);</span><br><span class="line">            fragment = <span class="keyword">this</span>.root != <span class="string">'/'</span> ? fragment.replace(<span class="keyword">this</span>.root, <span class="string">''</span>) : fragment;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> match = <span class="built_in">window</span>.location.href.match(<span class="regexp">/#(.*)$/</span>);</span><br><span class="line">            fragment = match ? match[<span class="number">1</span>] : <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.clearSlashes(fragment);</span><br><span class="line">    &#125;,</span><br><span class="line">    clearSlashes: <span class="function"><span class="keyword">function</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> path.toString().replace(<span class="regexp">/\/$/</span>, <span class="string">''</span>).replace(<span class="regexp">/^\//</span>, <span class="string">''</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params">re, handler</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> re == <span class="string">'function'</span>) &#123;</span><br><span class="line">            handler = re;</span><br><span class="line">            re = <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.routes.push(&#123; <span class="attr">re</span>: re, <span class="attr">handler</span>: handler&#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>, r; i&lt;<span class="keyword">this</span>.routes.length, r = <span class="keyword">this</span>.routes[i]; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(r.handler === param || r.re.toString() === param.toString()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.routes.splice(i, <span class="number">1</span>); </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    flush: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.routes = [];</span><br><span class="line">        <span class="keyword">this</span>.mode = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.root = <span class="string">'/'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    check: <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> fragment = f || <span class="keyword">this</span>.getFragment();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="keyword">this</span>.routes.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> match = fragment.match(<span class="keyword">this</span>.routes[i].re);</span><br><span class="line">            <span class="keyword">if</span>(match) &#123;</span><br><span class="line">                match.shift();</span><br><span class="line">                <span class="keyword">this</span>.routes[i].handler.apply(&#123;&#125;, match);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            &#125;           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    listen: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">var</span> current = self.getFragment();</span><br><span class="line">        <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (current !== self.getFragment()) &#123;</span><br><span class="line">                current = self.getFragment();</span><br><span class="line">                self.check(current);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (history.pushState) &#123;</span><br><span class="line">            <span class="built_in">window</span>.onpopstate = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'state: '</span> + <span class="built_in">JSON</span>.stringify(event.state));</span><br><span class="line">                fn()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            clearInterval(<span class="keyword">this</span>.interval);</span><br><span class="line">            <span class="keyword">this</span>.interval = setInterval(fn, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    navigate: <span class="function"><span class="keyword">function</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">        path = path ? path : <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.mode === <span class="string">'history'</span>) &#123;</span><br><span class="line">            history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="keyword">this</span>.root + <span class="keyword">this</span>.clearSlashes(path));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">window</span>.location.href = <span class="built_in">window</span>.location.href.replace(<span class="regexp">/#(.*)$/</span>, <span class="string">''</span>) + <span class="string">'#'</span> + path;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// configuration</span></span><br><span class="line">Router.config(&#123; <span class="attr">mode</span>: <span class="string">'history'</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// returning the user to the initial state</span></span><br><span class="line">Router.navigate();</span><br><span class="line"></span><br><span class="line"><span class="comment">// adding routes</span></span><br><span class="line">Router</span><br><span class="line">.add(<span class="regexp">/about/</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'about'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.add(<span class="regexp">/products\/(.*)\/edit\/(.*)/</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'products'</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.add(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'default'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.check(<span class="string">'/products/12/edit/22'</span>).listen();</span><br><span class="line"></span><br><span class="line"><span class="comment">// forwarding</span></span><br><span class="line">Router.navigate(<span class="string">'/about'</span>);</span><br></pre></td></tr></table></figure><h3 id="react-router中的路由用法"><a href="#react-router中的路由用法" class="headerlink" title="react-router中的路由用法"></a>react-router中的路由用法</h3><p>react-router中路由提供两个基础的组件<link>,<route>,<redirect></redirect></route></p><ol><li><p><route>,项目初始化的时候<route>组件时候会有两步操作</route></route></p><ol><li>会绑定popstate事件，如果有事件发生立即刷新组件</li><li>将组件实例加入到观察列表instances当中，方便有history state变化的时候将列表中实例重新渲染</li></ol></li><li><p><link>组件被点击的时候，调用 history.pushState({}, null, path)更新history,并重新渲染观察列表instances里面的route组件，显示对应的组件</p></li><li><p><redirect>组件有两个属性to,path,用来跳转</redirect></p><blockquote><p>调用history.pushState()或者history.replaceState()不会触发popstate事件. popstate事件只会在浏览器某些行为下触发, 比如点击后退、前进按钮(或者在JavaScript中调用history.back()、history.forward()、history.go()方法)</p></blockquote></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PropTypes, Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> instances = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> register = <span class="function">(<span class="params">comp</span>) =&gt;</span> instances.push(comp)</span><br><span class="line"><span class="keyword">const</span> unregister = <span class="function">(<span class="params">comp</span>) =&gt;</span> instances.splice(instances.indexOf(comp), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> historyPush = <span class="function">(<span class="params">path</span>) =&gt;</span> &#123;</span><br><span class="line">  history.pushState(&#123;&#125;, <span class="literal">null</span>, path)</span><br><span class="line">  instances.forEach(<span class="function"><span class="params">instance</span> =&gt;</span> instance.forceUpdate())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> historyReplace = <span class="function">(<span class="params">path</span>) =&gt;</span> &#123;</span><br><span class="line">  history.replaceState(&#123;&#125;, <span class="literal">null</span>, path)</span><br><span class="line">  instances.forEach(<span class="function"><span class="params">instance</span> =&gt;</span> instance.forceUpdate())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> matchPath = <span class="function">(<span class="params">pathname, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; exact = <span class="literal">false</span>, path &#125; = options</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!path) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      path: <span class="literal">null</span>,</span><br><span class="line">      url: pathname,</span><br><span class="line">      isExact: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> match = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`^<span class="subst">$&#123;path&#125;</span>`</span>).exec(pathname)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!match)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> url = match[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">const</span> isExact = pathname === url</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (exact &amp;&amp; !isExact)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    path,</span><br><span class="line">    url,</span><br><span class="line">    isExact,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Route</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes: &#123;</span><br><span class="line">    path: PropTypes.string,</span><br><span class="line">    exact: PropTypes.bool,</span><br><span class="line">    component: PropTypes.func,</span><br><span class="line">    render: PropTypes.func,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    addEventListener(<span class="string">"popstate"</span>, <span class="keyword">this</span>.handlePop)</span><br><span class="line">    register(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    unregister(<span class="keyword">this</span>)</span><br><span class="line">    removeEventListener(<span class="string">"popstate"</span>, <span class="keyword">this</span>.handlePop)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handlePop = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.forceUpdate()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      path,</span><br><span class="line">      exact,</span><br><span class="line">      component,</span><br><span class="line">      render,</span><br><span class="line">    &#125; = <span class="keyword">this</span>.props</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> match = matchPath(location.pathname, &#123; path, exact &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!match)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (component)</span><br><span class="line">      <span class="keyword">return</span> React.createElement(component, &#123; match &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (render)</span><br><span class="line">      <span class="keyword">return</span> render(&#123; match &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    to: PropTypes.string.isRequired,</span><br><span class="line">    replace: PropTypes.bool,</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; replace, to &#125; = <span class="keyword">this</span>.props</span><br><span class="line"></span><br><span class="line">    event.preventDefault()</span><br><span class="line">    replace ? historyReplace(to) : historyPush(to)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; to, children&#125; = <span class="keyword">this</span>.props</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;a href=&#123;to&#125; onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><br><span class="line">        &#123;children&#125;</span><br><span class="line">      &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Redirect extends Component &#123;</span></span><br><span class="line"><span class="regexp">  static defaultProps = &#123;</span></span><br><span class="line"><span class="regexp">    push: false</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  static propTypes = &#123;</span></span><br><span class="line"><span class="regexp">    to: PropTypes.string.isRequired,</span></span><br><span class="line"><span class="regexp">    push: PropTypes.bool.isRequired,</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  componentDidMount() &#123;</span></span><br><span class="line"><span class="regexp">    const &#123; to, push &#125; = this.props</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    push ? historyPush(to) : historyReplace(to)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return null</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文链接&lt;br&gt;&lt;a href=&quot;http://krasimirtsonev.com/blog/article/A-modern-JavaScript-router-in-100-lines-history-api-pushState-hash-url&quot; target=&quot;_
      
    
    </summary>
    
    
      <category term="react router" scheme="https://annilq.github.io/tags/react-router/"/>
    
  </entry>
  
  <entry>
    <title>使用heroku部署nodejs项目</title>
    <link href="https://annilq.github.io/2018/02/23/heroku/"/>
    <id>https://annilq.github.io/2018/02/23/heroku/</id>
    <published>2018-02-23T07:43:01.000Z</published>
    <updated>2018-02-23T11:32:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="heroku参考文档"><a href="#heroku参考文档" class="headerlink" title="heroku参考文档"></a>heroku参考文档</h3><p><a href="https://devcenter.heroku.com/articles/getting-started-with-nodejs#introduction" target="_blank" rel="noopener">getting-started-with-nodejs</a></p><h3 id="heroku-发布项目流程以及常用命令"><a href="#heroku-发布项目流程以及常用命令" class="headerlink" title="heroku 发布项目流程以及常用命令"></a>heroku 发布项目流程以及常用命令</h3><ol><li>heroku login //登录</li><li>git clone project</li><li>heroku create //创建heroku项目</li><li>git push heroku master //将代码提交到heroku服务器上</li><li><p>声明一个Procfile 文件用来描述被执行的命令</p> <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web: <span class="keyword">node</span> <span class="title">index</span>.js //web 为程序类型，说明是web程序</span><br></pre></td></tr></table></figure></li><li><p>heroku ps:scale web=1 //确保有一个项目实例在运行</p></li><li>heroku open //打开项目</li><li>heroku logs –tail //查看项目运行状态</li></ol><h3 id="云服务使用数据库"><a href="#云服务使用数据库" class="headerlink" title="云服务使用数据库"></a>云服务使用数据库</h3><p><a href="https://mlab.com/" target="_blank" rel="noopener">mlab链接</a></p><h4 id="连接数据库需要注意"><a href="#连接数据库需要注意" class="headerlink" title="连接数据库需要注意"></a>连接数据库需要注意</h4><ol><li>创建数据库时候也要为数据库创建一个数据库用户，否则会报验证错误</li><li>将本地数据库链接改成远程连接</li></ol><h3 id="页面503问题"><a href="#页面503问题" class="headerlink" title="页面503问题"></a>页面503问题</h3><p><a href="https://devcenter.heroku.com/articles/error-pages" target="_blank" rel="noopener">参考链接</a><br>heroku config:set<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku config:<span class="builtin-name">set</span> <span class="attribute">ERROR_PAGE_URL</span>=//sleepy-ravine-72939.herokuapp.com/</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;heroku参考文档&quot;&gt;&lt;a href=&quot;#heroku参考文档&quot; class=&quot;headerlink&quot; title=&quot;heroku参考文档&quot;&gt;&lt;/a&gt;heroku参考文档&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://devcenter.heroku.com/
      
    
    </summary>
    
    
      <category term="heroku" scheme="https://annilq.github.io/tags/heroku/"/>
    
  </entry>
  
  <entry>
    <title>用 flask 创建 todo api</title>
    <link href="https://annilq.github.io/2018/02/13/python-todo/"/>
    <id>https://annilq.github.io/2018/02/13/python-todo/</id>
    <published>2018-02-13T07:40:20.000Z</published>
    <updated>2018-02-23T11:32:35.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h4><p>一个后端由flask 与 mongodb提供restful接口，前端由react创建的todo app项目</p><ol><li><p>前端 <a href="https://github.com/annilq/react-todos" target="_blank" rel="noopener">项目地址</a></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/annilq/react-todos</span></span><br><span class="line">npm i</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure></li><li><p>flask只提供restful风格的数据接口</p><ol><li>code说明<ol><li>0 成功</li><li>-1 错误</li><li>-2 过期</li></ol></li></ol></li></ol><h4 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h4><ol><li><p>创建虚拟环境flask-server</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv flask-server</span><br></pre></td></tr></table></figure></li><li><p>进入python-todo-server并在当前目录激活环境(退出环境命令<code>deactivate</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ./bin/activate</span><br></pre></td></tr></table></figure></li></ol><p><a href="https://docs.python.org/3/library/venv.html" target="_blank" rel="noopener">用venv安装虚拟环境</a></p><h4 id="安装项目依赖"><a href="#安装项目依赖" class="headerlink" title="安装项目依赖"></a>安装项目依赖</h4><ol><li><p>首先安装mongodb<br>参考<a href="https://annilq.github.io/2016/04/18/mongoDb/">mongodb小记</a></p></li><li><p>安装依赖</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pip install Flask</span><br><span class="line">pip install Flask-PyMongo</span><br><span class="line">pip install Flask-Session</span><br><span class="line">pip install Flask-Bcrypt</span><br><span class="line"><span class="comment">## 记录第三方模块</span></span><br><span class="line">pip freeze &gt; requirements.txt</span><br><span class="line"><span class="comment">## 安装txt文件里所记录的所有第三方模块</span></span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li></ol><h4 id="项目注意事项"><a href="#项目注意事项" class="headerlink" title="项目注意事项"></a>项目注意事项</h4><ol><li>mongodb查询的返回值是bson数据结构,不能直接用<code>flask</code>的<code>jsonify</code>直接返回<ol><li>需要自定义一个自定义一个方法将数据返回 <a href="https://github.com/annilq/python/blob/master/others/flask-server/util.py" target="_blank" rel="noopener">参考链接</a></li><li>将查询数据中的<code>_id</code>由<code>ObjectId</code>格式转成<code>str</code>格式返回</li></ol></li></ol><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ol><li><a href="http://api.mongodb.com/python/current/tutorial.html" target="_blank" rel="noopener">pymongo</a></li><li><a href="http://flask-pymongo.readthedocs.io/en/latest/#flask_pymongo.PyMongo" target="_blank" rel="noopener">flask-pymongo</a></li><li><a href="https://pythonhosted.org/Flask-Session/" target="_blank" rel="noopener">Flask-Session</a></li><li><a href="http://flask-bcrypt.readthedocs.io/en/latest/" target="_blank" rel="noopener">Flask-Bcrypt</a></li></ol><h4 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h4><p><a href="https://github.com/annilq/python/tree/master/others/flask-server" target="_blank" rel="noopener">flask-server</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;项目说明&quot;&gt;&lt;a href=&quot;#项目说明&quot; class=&quot;headerlink&quot; title=&quot;项目说明&quot;&gt;&lt;/a&gt;项目说明&lt;/h4&gt;&lt;p&gt;一个后端由flask 与 mongodb提供restful接口，前端由react创建的todo app项目&lt;/p&gt;
&lt;ol&gt;
      
    
    </summary>
    
    
      <category term="python flask" scheme="https://annilq.github.io/tags/python-flask/"/>
    
  </entry>
  
  <entry>
    <title>前端处理多个相同ajax请求问题</title>
    <link href="https://annilq.github.io/2018/01/31/ajax/"/>
    <id>https://annilq.github.io/2018/01/31/ajax/</id>
    <published>2018-01-31T09:36:01.000Z</published>
    <updated>2018-06-05T14:57:03.931Z</updated>
    
    <content type="html"><![CDATA[<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ol><li>首先定义一个url的set，一个发起请求的列表</li></ol><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li>当发起一个新请求</li><li>当发起请求一个时候，根据参数与url生成一个key</li><li>判断当前key是否存在url的set中<ol><li>不存在<ol><li>将当前key添加到set中，表明该请求已经发出，并且根据key生成一个该请求对应处理函数的数组</li><li>随后发出该请求</li></ol></li><li>存在<ol><li>返回一个待resolve的promise，并且将该resolve方法添加到刚刚生成的该key对应的处理函数array中</li></ol></li></ol></li><li>当请求成功时候，循环执行该key对应的resolve方法将数据resolve出去</li><li>清除该处理函数map中对应的key，清除当前set中的对应的key，以便下次重新发起请求</li></ol><p>具体代码如下(如果引入rx.js,处理方法会优雅的多)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.urlsets = new Set();</span><br><span class="line">    <span class="keyword">this</span>.fullfill = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _generatorKey(url) &#123;</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 数据回来后一次调用各个promise 的resolve,并重置当前状态</span></span><br><span class="line">  handleFulfill(<span class="keyword">data</span>, key) &#123;</span><br><span class="line">    <span class="keyword">this</span>.fullfill[key].forEach(resolve =&gt; &#123;</span><br><span class="line">      resolve(<span class="keyword">data</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    delete <span class="keyword">this</span>.fullfill[key];</span><br><span class="line">    <span class="keyword">this</span>.urlsets.delete(key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取数据信息</span></span><br><span class="line">  getConfigData(url) &#123;</span><br><span class="line">    let key = <span class="keyword">this</span>._generatorKey(url);</span><br><span class="line">    <span class="comment">// 如果该请求还没有回来就将resolve方法缓存</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.urlsets.has(key)) &#123;</span><br><span class="line">      <span class="keyword">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.fullfill[key].push(resolve);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 没有当前url则发送请求</span></span><br><span class="line">      <span class="keyword">this</span>.urlsets.add(key);</span><br><span class="line">      <span class="keyword">this</span>.fullfill[key] = [];</span><br><span class="line">      <span class="keyword">return</span> axios.<span class="keyword">get</span>(url).then(<span class="keyword">data</span> =&gt; &#123;</span><br><span class="line">        <span class="comment">// 执行之前缓存的resolve方法，并返回data</span></span><br><span class="line">        <span class="keyword">this</span>.handleFulfill(<span class="keyword">data</span>, key);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">data</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export <span class="keyword">default</span> new Store();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;结构&quot;&gt;&lt;a href=&quot;#结构&quot; class=&quot;headerlink&quot; title=&quot;结构&quot;&gt;&lt;/a&gt;结构&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;首先定义一个url的set，一个发起请求的列表&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;流程&quot;&gt;&lt;a href=&quot;#流程&quot; cla
      
    
    </summary>
    
    
      <category term="ajax 并发" scheme="https://annilq.github.io/tags/ajax-%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>PWA小计</title>
    <link href="https://annilq.github.io/2017/12/18/pwa/"/>
    <id>https://annilq.github.io/2017/12/18/pwa/</id>
    <published>2017-12-18T03:49:40.000Z</published>
    <updated>2017-12-22T11:17:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PWA简介"><a href="#PWA简介" class="headerlink" title="PWA简介"></a>PWA简介</h3><p>PWA （ Progressive Web Apps，渐进式网页应用）是由谷歌提出的新一代 Web 应用概念，旨在提供可靠、快速、类似 Native 应用的服务方案，PWA 正在迅速成为一套最佳实践。</p><h3 id="PWA涉及的技术点"><a href="#PWA涉及的技术点" class="headerlink" title="PWA涉及的技术点"></a>PWA涉及的技术点</h3><ul><li>Service Worker</li><li>Web 应用清单 manifest.json</li></ul><h3 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h3><p>Service workers 本质上充当Web应用程序与浏览器之间的代理服务器，也可以在网络可用时作为浏览器和网络间的代理。他们还允许访问推送通知和后台同步API。</p><p>Service Worker的生命周期</p><ul><li>注册</li><li>安装</li><li>激活</li></ul><p>Service Worker的运行过程</p><ul><li>检查当前浏览器是否支持 Service Workers</li><li>如果支持，注册 Service Worker 文件</li><li>激活install事件(一般是被用来填充你的浏览器的离线缓存能力)<ul><li>event.waitUntil() :这会确保Service Worker 不会在 waitUntil() 里面的代码执行完毕之前安装完成</li></ul></li><li>激活activate事件</li><li>开始监听fetch事件<ul><li>event.respondWith() 劫持我们的 HTTP 响应，然后你用可以自定义Response更新他们。</li></ul></li></ul><h3 id="CacheStorage-api与-Cache-对象"><a href="#CacheStorage-api与-Cache-对象" class="headerlink" title="CacheStorage api与 Cache 对象"></a>CacheStorage api与 Cache 对象</h3><h4 id="CacheStorage-api"><a href="#CacheStorage-api" class="headerlink" title="CacheStorage api"></a>CacheStorage api</h4><ol><li>caches.open() 打开一个Cache对象，返回一个 Promise对象，resolve的结果是一个Cache对象</li><li>caches.keys() 删除一个Cache对象，返回一个 Promise对象，resolve的结果true则表示成功</li><li>caches.delete() 返回一个 Promise对象，resolve的结果是一个Cache对象的数组</li></ol><h4 id="Cache-对象"><a href="#Cache-对象" class="headerlink" title="Cache 对象"></a>Cache 对象</h4><ol><li>cache.match(request, options) 返回一个 Promise对象，resolve的结果是跟 Cache 对象匹配的第一个已经缓存的请求。</li><li>cache.matchAll(request, options) 返回一个Promise 对象，resolve的结果是跟Cache对象匹配的所有请求组成的数组。</li><li>cache.add(request) 抓取这个URL, 检索并把返回的response对象添加到给定的Cache对象.这在功能上等同于调用 fetch(), 然后使用 cache.put() 将response添加到cache中.</li><li>cache.addAll(requests) 抓取一个URL数组，检索并把返回的response对象添加到给定的Cache对象。</li><li>cache.put(request, response) 同时抓取一个请求及其响应，并将其添加到给定的cache。</li><li>cache.delete(request, options) 搜索key值为request的Cache 条目。如果找到，则删除该Cache 条目，并且返回一个resolve为true的Promise对象；如果未找到，则返回一个resolve为false的Promise对象。</li><li>cache.keys(request, options) 返回一个Promise对象，resolve的结果是Cache对象key值组成的数组。<blockquote><ol><li>Cache表示用于Request/Response对象对的存储，作为ServiceWorker生命周期的一部分被缓存。</li><li>CacheStorage<br>表示Cache对象的存储。提供一个所有命名缓存的主目录，ServiceWorker可以访问并维护名字字符串到Cache对象的映射。</li></ol></blockquote></li></ol><h4 id="代码中有注释"><a href="#代码中有注释" class="headerlink" title="代码中有注释"></a>代码中有注释</h4><p><a href="https://github.com/annilq/blog/tree/master/jscode/pwa/sw.js" target="_blank" rel="noopener">sw.js</a></p><h3 id="Web-应用清单-manifest-json"><a href="#Web-应用清单-manifest-json" class="headerlink" title="Web 应用清单 manifest.json"></a>Web 应用清单 manifest.json</h3><ul><li>name:用作当用户被提示安装应用时出现的文本。</li><li>short_name :用作当应用安装后出现在用户主屏幕上的文本</li><li>start_url :决定了当用户从设备的主屏幕开启 Web 应用时所出现的第一个页面。本章稍后会详细介绍。<br>根据构建的 Web 应用类型，你可能需要预设如何首次加载。display 字段表示开发者希望他们的 Web 应用如何向用户展示。本章稍后会详细介绍为什么这个字段如此重要。</li><li>theme_color :可以对浏览器的地址栏进行着色，以符合网站的主色调。<br>icons 字段决定了当 Web 应用被添加到设备主屏幕时所显示的图标。</li><li>background_color :name 和 background_color 属性用来显示启动页面</li><li>display: 显示模式<ol><li>Fullscreen - 打开 Web 应用并占用整个可用的显示区域。</li><li>Standalone - 打开 Web 应用以看起来像一个独立的原生应用。此模式下，用户代理将排除诸如 URL 栏等标准浏览器 UI 元素，但可以包括诸如状态栏和系统返回按钮的其他系统 UI 元素。</li><li>Minimal-ui - 此模式类似于 fullscreen，但为终端用户提供了可访问的最小 UI 元素集合，例如，后退按钮、前进按钮、重载按钮以及查看网页地址的一些方式。</li><li>Browser - 使用操作系统内置的标准浏览器来打开 Web 应用。</li></ol></li></ul><p><a href="https://github.com/annilq/blog/tree/master/jscode/pwa/manifest.json" target="_blank" rel="noopener">manifest.json</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="http://sangka-z.com/PWA-Book-CN/" target="_blank" rel="noopener">Progressive Web Apps (PWA) 中文版</a></li><li><a href="https://zhuanlan.zhihu.com/p/25800461" target="_blank" rel="noopener">PWA 在饿了么的实践经验</a></li><li><a href="https://developers.google.com/web/fundamentals/primers/service-workers/" target="_blank" rel="noopener">服务工作线程：简介</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;PWA简介&quot;&gt;&lt;a href=&quot;#PWA简介&quot; class=&quot;headerlink&quot; title=&quot;PWA简介&quot;&gt;&lt;/a&gt;PWA简介&lt;/h3&gt;&lt;p&gt;PWA （ Progressive Web Apps，渐进式网页应用）是由谷歌提出的新一代 Web 应用概念，旨在提
      
    
    </summary>
    
    
      <category term="PWA" scheme="https://annilq.github.io/tags/PWA/"/>
    
  </entry>
  
  <entry>
    <title>javascript 搜索算法</title>
    <link href="https://annilq.github.io/2017/12/07/serach/"/>
    <id>https://annilq.github.io/2017/12/07/serach/</id>
    <published>2017-12-07T08:04:40.000Z</published>
    <updated>2017-12-11T12:17:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="几种常见的搜索算法"><a href="#几种常见的搜索算法" class="headerlink" title="几种常见的搜索算法"></a>几种常见的搜索算法</h3><ol><li>顺序搜索</li><li>二分搜索</li></ol><h3 id="顺序搜索"><a href="#顺序搜索" class="headerlink" title="顺序搜索"></a>顺序搜索</h3><p>顺序或线性搜索是最基本的搜索算法。它的机制是，将每一个数据结构中的元素和我们要找的元素做比较。顺序搜索是最低效的一种搜索算法</p><h3 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h3><p>选择排序大致思路是找到数据结构最小值并将其放置到第一位，接着找到第二小的值放到第二位，以此类推<br>这个算法要求被搜索的数据结构已排序</p><p>  算法步骤</p><ol><li>选择数组的中间值</li><li>如果选中的是待搜索值，那么算法执行完毕</li><li>如果待搜索的值比选中值要小，则返回步骤1并选择值左边的子数组中寻找</li><li>如果待搜索的值比选中值要大，则返回步骤1并选择值右边的子数组中寻找</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;几种常见的搜索算法&quot;&gt;&lt;a href=&quot;#几种常见的搜索算法&quot; class=&quot;headerlink&quot; title=&quot;几种常见的搜索算法&quot;&gt;&lt;/a&gt;几种常见的搜索算法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;顺序搜索&lt;/li&gt;
&lt;li&gt;二分搜索&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="https://annilq.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>javascript排序</title>
    <link href="https://annilq.github.io/2017/12/01/sort/"/>
    <id>https://annilq.github.io/2017/12/01/sort/</id>
    <published>2017-12-01T09:01:40.000Z</published>
    <updated>2017-12-22T11:17:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="几种常见的排序算法"><a href="#几种常见的排序算法" class="headerlink" title="几种常见的排序算法"></a>几种常见的排序算法</h3><ol><li>冒泡排序</li><li>选择排序</li><li>插入排序</li><li>归并排序</li><li>快速排序</li></ol><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡排序是比较任何相邻的两个项，如果第一个比第二个大则交换他们</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>选择排序大致思路是找到数据结构最小值并将其放置到第一位，接着找到第二小的值放到第二位，以此类推</p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>插入排序是每次排出一个数组项，依次方式构建最后的排序数组，假定第一项已经排序了，接着他和第二项做比较，第二项是应该插到原位还是第一项之前呢，以此类推</p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>归并排序是一种分治算法，其思想是将原始数组切分成较小的数组，直到每个小数组只有一个位置，接着将小数组归并成较大的数组，直到最后一个只有一个排序完毕的大数组</p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序也使用分治的方法，将原始数组切分成较小的数组</p><h4 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h4><ul><li>首先，从数组中间选出一个主元。</li><li>创建两个指针，左边一个指向数组的第一项，右边指向数组的最后一项。移动指针直到找到一个比主元大的元素，接着，移动右指针直到找到一个比主元小的元素，然后交换他们，重复这个过程，直到左指针超过了右指针。这个过程会使比主元小的值都在主元的左侧，比主元大的值都在右侧，这一过程叫做划分操作</li><li>接着，算法对划分的小数组重复之前的两个操作，直到数组已经完全排序</li></ul><p><a href="https://github.com/annilq/blog/tree/master/jscode/sort/sort.js" target="_blank" rel="noopener">code</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;几种常见的排序算法&quot;&gt;&lt;a href=&quot;#几种常见的排序算法&quot; class=&quot;headerlink&quot; title=&quot;几种常见的排序算法&quot;&gt;&lt;/a&gt;几种常见的排序算法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;冒泡排序&lt;/li&gt;
&lt;li&gt;选择排序&lt;/li&gt;
&lt;li&gt;插入排序&lt;/li
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="https://annilq.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>javascript数据结构</title>
    <link href="https://annilq.github.io/2017/11/29/datastructures/"/>
    <id>https://annilq.github.io/2017/11/29/datastructures/</id>
    <published>2017-11-29T15:22:40.000Z</published>
    <updated>2017-12-22T11:17:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="几种常见的数据结构"><a href="#几种常见的数据结构" class="headerlink" title="几种常见的数据结构"></a>几种常见的数据结构</h3><ol><li>Stack栈</li><li>Queue队列</li><li>LinkedList链表</li><li>Set集合</li><li>Map字典、散列表</li><li>Tree树</li><li>图(还不理解)</li></ol><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><p>栈是一种遵从后进先出原则的有序集合</p><ul><li>push(value): 添加一个新元素到栈顶</li><li>pop(): 移除栈顶的元素，并且返回移除的元素</li><li>peek(): 返回栈顶的元素</li><li>isEmpty(): 判断栈是否为空</li><li>clear():清空栈</li><li>size(): 返回栈元素个数</li></ul><p>应用：十进制转换二进制</p><p><a href="https://github.com/annilq/blog/tree/master/jscode/datastructrues/stack.js" target="_blank" rel="noopener">stack code</a></p><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>队列是遵从先进先出原则的一组有序集合</p><ul><li>enqueue(value): 向队列尾部添加新元素</li><li>dequeue(): 移除队列第一个元素，并返回该元素</li><li>front(): 返回队列的第一个元素</li><li>isEmpty(): 判断队列是否为空</li><li><p>size(): 返回队列的元素个数</p><p>其他修改版本的队列实现</p></li><li>优先队列 应用：医院排队<blockquote><p>需要构建一个包含优先级的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Node=<span class="function"><span class="keyword">function</span>(<span class="params">element,priority</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element=element;</span><br><span class="line">  <span class="keyword">this</span>.priority=priority;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><p><a href="https://github.com/annilq/blog/tree/master/jscode/datastructrues/queue.js" target="_blank" rel="noopener">queue code</a></p><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>链表是有序的元素集合，不同于集合，链表中的元素在内存中不是连续放置的，每个元素由一个存储元素本身的节点和一个指向下一个元素的引用组成</p><ul><li>append(element): 向链表尾处添加一个元素</li><li>insert(position,element): 向指定位置添加一个元素</li><li>remove(element): 移除指定元素</li><li>indexOf(element): 返回元素在链表中的索引</li><li>removeAt(position): 移除指定位置的元素</li><li>isEmpty(): 判断链表是否为空</li><li>size(): 返回链表元素个数</li><li><p>toString(): 由于链表项使用了Node类，就需要重写继承自javascript对象默认的toString方法，让其只输出元素的值</p><p>其他修改版本的队列实现</p></li><li><p>双向链表 :双向链表中链接是双向的，一个链接向上的一个链接向下的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Node=<span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element=element;</span><br><span class="line">  <span class="keyword">this</span>.prev=<span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.next=<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>循环链表 :循环链表与链表的唯一区别在于,最后一个元素指向下一个元素的指针不是null,而是第一个元素head</p><blockquote><p>ps:使用Stack 、Queue与LinkedList之间的区别</p><ul><li>Stack 、Queue相对于链表来说数据结构简单，并且(再大多数语言中)数组的大小是固定的，不容易扩容，链表可以动态扩容</li><li>从Stack 、Queue起点或中间插入或移除元素成本非常高，因为需要移动元素，而链表不需要移动元素</li></ul></blockquote></li></ul><p><a href="https://github.com/annilq/blog/tree/master/jscode/datastructrues/linkedlist.js" target="_blank" rel="noopener">linkedlist code</a></p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>集合是以[值,值]的形式储存元素，是由一组无序且唯一的项组成的</p><p>  集合方法</p><ul><li>add(value): 添加一个元素到集合中</li><li>delete(value): 删除集合中的一个元素</li><li>has(value): 判断值是否在集合中</li><li>clear(): 清空集合</li><li>size(): 返回集合中的元素数量</li><li><p>values(): 返回一个包含集合中所有值的数组</p><p>集合操作</p></li><li>union 并集</li><li>intersection 交集</li><li>difference 差集</li><li>subset 子集</li></ul><p><a href="https://github.com/annilq/blog/tree/master/jscode/datastructrues/set.js" target="_blank" rel="noopener">Set code</a></p><h3 id="Map-HashMap"><a href="#Map-HashMap" class="headerlink" title="Map,HashMap"></a>Map,HashMap</h3><h4 id="Map是以-键-值-的形式储存元素"><a href="#Map是以-键-值-的形式储存元素" class="headerlink" title="Map是以[键,值]的形式储存元素"></a>Map是以[键,值]的形式储存元素</h4><p>  Map方法</p><ul><li>set(key,value):向字典中添加元素</li><li>delete(key):删除字典中指定的key</li><li>get(key):获取指定key的value</li><li>clear():清空字典</li><li>size():返回字典中元素个数</li><li>keys():以数组形式返回字典中所有的元素的键</li><li>values():以数组形式返回字典中所有的元素的值</li></ul><p><a href="https://github.com/annilq/blog/tree/master/jscode/datastructrues/map.js" target="_blank" rel="noopener">Map code</a></p><h4 id="HashMap的作用是尽可能快地在数据结构中找到一个值，使用HashMap可以知道该值的具体位置而不需要遍历"><a href="#HashMap的作用是尽可能快地在数据结构中找到一个值，使用HashMap可以知道该值的具体位置而不需要遍历" class="headerlink" title="HashMap的作用是尽可能快地在数据结构中找到一个值，使用HashMap可以知道该值的具体位置而不需要遍历"></a>HashMap的作用是尽可能快地在数据结构中找到一个值，使用HashMap可以知道该值的具体位置而不需要遍历</h4><p>HashMap方法</p><ul><li>put(key,value)</li><li>get(key)</li><li>remove(key)</li></ul><h5 id="HashMap的创建需要注意以下几部分"><a href="#HashMap的创建需要注意以下几部分" class="headerlink" title="HashMap的创建需要注意以下几部分"></a>HashMap的创建需要注意以下几部分</h5><ul><li>散列函数 可以将键值转换成数字用来记录该值在数据结构中的位置</li><li>处理散列表中的冲突<ul><li>分离链接：用链表来存储某个位置的值</li><li>线性探索:当某个位置index已经被占据时候，则尝试index+1的位置，以此类推</li></ul></li></ul><p><a href="https://github.com/annilq/blog/tree/master/jscode/datastructrues/hashmap.js" target="_blank" rel="noopener">HashMap code</a></p><h3 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h3><p>树是一种分层数据的抽象模型，树中的每个元素都叫做节点，位于树顶部的节点叫根节点，每个节点（根节点除外）都有一个父节点以及零个或者多个子节点</p><ul><li>insert(key):向树中插入一个值</li><li>search(key):在树中查找一个值，返回true or false</li><li>inOrderTraverse():中序遍历树节点,是一种从小到大的顺序访问所有节点</li><li>preOrderTraverse():先序遍历树节点,是一种优先于后代节点的顺序访问每个节点</li><li>postOrderTraverse():后序遍历树节点，是先访问节点的后代节点，在访问节点本身</li><li>min():返回树中最小值</li><li>max():返回树中最大值</li><li>remove(key):从树中移除某个值</li></ul><p><a href="https://github.com/annilq/blog/tree/master/jscode/datastructrues/BinarySearchTree.js" target="_blank" rel="noopener">BinarySearchTree code</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;几种常见的数据结构&quot;&gt;&lt;a href=&quot;#几种常见的数据结构&quot; class=&quot;headerlink&quot; title=&quot;几种常见的数据结构&quot;&gt;&lt;/a&gt;几种常见的数据结构&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Stack栈&lt;/li&gt;
&lt;li&gt;Queue队列&lt;/li&gt;
&lt;li&gt;Lin
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="https://annilq.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>RxJS 小记</title>
    <link href="https://annilq.github.io/2017/11/09/rxjs/"/>
    <id>https://annilq.github.io/2017/11/09/rxjs/</id>
    <published>2017-11-09T11:30:01.000Z</published>
    <updated>2017-11-09T11:35:39.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简单来说-Observable是一个接收observer并且返回一个可用于取消订阅方法的方法"><a href="#简单来说-Observable是一个接收observer并且返回一个可用于取消订阅方法的方法" class="headerlink" title="简单来说 Observable是一个接收observer并且返回一个可用于取消订阅方法的方法"></a>简单来说 Observable是一个接收observer并且返回一个可用于取消订阅方法的方法</h3><p>下面是一个比较基础的实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myObservable</span>(<span class="params">observer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> datasource = <span class="keyword">new</span> DataSource();</span><br><span class="line">    datasource.ondata = <span class="function">(<span class="params">e</span>) =&gt;</span> observer.next(e);</span><br><span class="line">    datasource.onerror = <span class="function">(<span class="params">err</span>) =&gt;</span> observer.error(err);</span><br><span class="line">    datasource.oncomplete = <span class="function"><span class="params">()</span> =&gt;</span> observer.complete();</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        datasource.destroy();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一个健全一点的观察者应该保证以下几点</p><ol><li><code>next</code>，<code>error</code>和<code>complete</code>实际上都是可选的。你不必处理每个值，或错误或完成。</li><li>你不能在<code>complete</code>和<code>error</code>之后调用next</li><li>调用<code>complete</code>和<code>error</code>后需要调用取消订阅逻辑。</li><li>只有执行订阅方法,才会接收到数据源的值</li><li>如果你的<code>next</code>,<code>complete</code>或<code>error</code>处理程序抛出一个异常，你想调用你的取消订阅逻辑。</li></ol><h3 id="实现一个类RxJS需要实现以下几部分"><a href="#实现一个类RxJS需要实现以下几部分" class="headerlink" title="实现一个类RxJS需要实现以下几部分"></a>实现一个类RxJS需要实现以下几部分</h3><ol><li>数据源</li><li>observer</li><li>Observable生成器</li><li>observable</li><li>operator</li></ol><h4 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h4><ul><li>数据源可以产生数据给observer</li></ul><h4 id="observer"><a href="#observer" class="headerlink" title="observer"></a>observer</h4><ul><li>包含  <code>next</code>, <code>error</code> and <code>complete</code> 属性的对象，用来处理数据源的数据</li></ul><h4 id="Observable-生成器函数"><a href="#Observable-生成器函数" class="headerlink" title="Observable 生成器函数"></a>Observable 生成器函数</h4><ul><li>接收一个observer对象(该observer由observable传入并且经过包装后得到)，并且将observer和数据源关联</li></ul><h4 id="observable"><a href="#observable" class="headerlink" title="observable"></a>observable</h4><ul><li>由Observable生成器函数生成，并带有一个接收observer对象的subscribe方法</li></ul><h4 id="operator"><a href="#operator" class="headerlink" title="operator"></a>operator</h4><ul><li>操作符是一个接收observable并且返回新observable的函数</li><li>操作符在做什么：当你订阅它的返回的observable时，它创建一个<code>mapObserver</code>来完成工作并将<code>observer</code>和<code>mapObserver</code>链接在一起。建立operator实际上只是创建一个用于在订阅时连接观察者的模板</li></ul><h2 id="Observable执行顺序"><a href="#Observable执行顺序" class="headerlink" title="Observable执行顺序"></a>Observable执行顺序</h2><ol><li>Observable生成器函数生成一个observable</li><li>observable调用subscribe时传入一个observer，并返回一个订阅Subscription对象</li><li>将observer与数据源关联</li><li>数据源发出数据时调用observer相关方法</li><li>可以调用订阅对象Subscription的unsubscribe方法取消订阅</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  -------------------------------DataSource----------------------------</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventDataSource</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>._id = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.emit(i++), <span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  emit(n) &#123;</span><br><span class="line">    <span class="keyword">const</span> limit = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.ondata) &#123;</span><br><span class="line">      <span class="keyword">this</span>.ondata(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n === limit) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.oncomplete) &#123;</span><br><span class="line">        <span class="keyword">this</span>.oncomplete();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.destroy();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  destroy() &#123;</span><br><span class="line">    clearInterval(<span class="keyword">this</span>._id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ArraySource=[<span class="string">"hello"</span>, <span class="string">"annilq"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PromiseSource=<span class="built_in">Promise</span>.resolve(<span class="string">"promise"</span>);</span><br><span class="line"><span class="comment">//  -------------------------------DataSource end----------------------------</span></span><br><span class="line"><span class="comment">//  -------------------------------Observable creator----------------------------</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SafeObserver</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(destination) &#123;</span><br><span class="line">    <span class="keyword">this</span>.destination = destination;</span><br><span class="line">  &#125;</span><br><span class="line">  next(value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isUnsubscribed &amp;&amp; <span class="keyword">this</span>.destination.next) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.destination.next(value);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">this</span>.unsubscribe();</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  error(err) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isUnsubscribed &amp;&amp; <span class="keyword">this</span>.destination.error) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.destination.error(err);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e2) &#123;</span><br><span class="line">        <span class="keyword">this</span>.unsubscribe();</span><br><span class="line">        <span class="keyword">throw</span> e2;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.unsubscribe();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  complete() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isUnsubscribed &amp;&amp; <span class="keyword">this</span>.destination.complete) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.destination.complete();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">this</span>.unsubscribe();</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.unsubscribe();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  unsubscribe() &#123;</span><br><span class="line">    <span class="keyword">this</span>.isUnsubscribed = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.unsub) &#123;</span><br><span class="line">      <span class="keyword">this</span>.unsub();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(_subscribe) &#123;</span><br><span class="line">    <span class="keyword">this</span>._subscribe = _subscribe;</span><br><span class="line">  &#125;</span><br><span class="line">  subscribe(observer) &#123;</span><br><span class="line">    <span class="keyword">const</span> safeObserver = <span class="keyword">new</span> SafeObserver(observer);</span><br><span class="line">    safeObserver.unsub = <span class="keyword">this</span>._subscribe(safeObserver);</span><br><span class="line">    <span class="keyword">return</span> safeObserver.unsubscribe.bind(safeObserver);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Observable.from = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Observable(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">    arr.forEach(<span class="function"><span class="params">data</span> =&gt;</span> observer.next(data));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">Observable.fromEvent = <span class="function"><span class="keyword">function</span>(<span class="params">EventDataSource</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Observable(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> datasource = <span class="keyword">new</span> EventDataSource();</span><br><span class="line">    datasource.ondata = <span class="function"><span class="params">e</span> =&gt;</span> observer.next(e);</span><br><span class="line">    datasource.onerror = <span class="function"><span class="params">err</span> =&gt;</span> observer.error(err);</span><br><span class="line">    datasource.oncomplete = <span class="function"><span class="params">()</span> =&gt;</span> observer.complete();</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> datasource.destroy();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">Observable.fromPromise = <span class="function"><span class="keyword">function</span>(<span class="params">promise</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Observable(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">    promise.then(<span class="function"><span class="params">data</span> =&gt;</span> observer.next(data));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------observable end----------------------------------</span></span><br><span class="line"><span class="comment">// ----------------------------------Operators----------------------------------</span></span><br><span class="line"><span class="comment">// “运算符”返回个新的可观察对象，当您订阅它时,它将订阅该可观察对象</span></span><br><span class="line">Observable.prototype.map = <span class="function"><span class="keyword">function</span>(<span class="params">project</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Observable(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mapObserver = &#123;</span><br><span class="line">      next: <span class="function"><span class="params">x</span> =&gt;</span> observer.next(project(x)),</span><br><span class="line">      error: <span class="function"><span class="params">err</span> =&gt;</span> observer.error(err),</span><br><span class="line">      complete: <span class="function"><span class="params">()</span> =&gt;</span> observer.complete()</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.subscribe(mapObserver);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// ----------------------------------Operators end-------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------usage----------------------------------</span></span><br><span class="line"><span class="keyword">const</span> myObservable = <span class="keyword">new</span> Observable(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> datasource = <span class="keyword">new</span> EventDataSource();</span><br><span class="line">  datasource.ondata = <span class="function"><span class="params">e</span> =&gt;</span> observer.next(e);</span><br><span class="line">  datasource.onerror = <span class="function"><span class="params">err</span> =&gt;</span> observer.error(err);</span><br><span class="line">  datasource.oncomplete = <span class="function"><span class="params">()</span> =&gt;</span> observer.complete();</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> datasource.destroy();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> myObservable1 = Observable.fromEvent(EventDataSource);</span><br><span class="line"><span class="keyword">const</span> myObservable2 = Observable.from(ArraySource);</span><br><span class="line"><span class="keyword">const</span> myObservable3 = Observable.fromPromise(PromiseSource);</span><br><span class="line">myObservable.map(<span class="function"><span class="params">x</span> =&gt;</span> x + x).subscribe(&#123;</span><br><span class="line">  next(x) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">myObservable1.subscribe(&#123;</span><br><span class="line">  next(x) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">myObservable2.subscribe(&#123;</span><br><span class="line">  next(x) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">myObservable3.subscribe(&#123;</span><br><span class="line">  next(x) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="RxJS实现中涉及的几个概念："><a href="#RxJS实现中涉及的几个概念：" class="headerlink" title="RxJS实现中涉及的几个概念："></a>RxJS实现中涉及的几个概念：</h3><ol><li>Observable (可观察对象): 表示一个概念，这个概念是一个可调用的未来值或事件的集合。</li><li>Observer (观察者): 一个回调函数的集合，它知道如何去监听由 Observable 提供的值。</li><li>Subscription (订阅): 表示 Observable 的执行，主要用于取消 Observable 的执行。</li><li>Operators (操作符): 采用函数式编程风格的纯函数 (pure function)，使用像 map、filter、concat、flatMap 等这样的操作符来处理集合。</li><li>Subject (主体): 相当于 EventEmitter，并且是将值或事件多路推送给多个 Observer 的唯一方式。</li><li>Schedulers (调度器): 用来控制并发并且是中央集权的调度员，允许我们在发生计算时进行协调，例如 setTimeout 或 requestAnimationFrame 或其他。</li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://medium.com/@benlesh/learning-observable-by-building-observable-d5da57405d87" target="_blank" rel="noopener">Learning Observable By Building Observable – Ben Lesh – Medium</a></li><li><a href="http://cn.rx.js.org/manual/overview.html" target="_blank" rel="noopener">RxJS入门</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简单来说-Observable是一个接收observer并且返回一个可用于取消订阅方法的方法&quot;&gt;&lt;a href=&quot;#简单来说-Observable是一个接收observer并且返回一个可用于取消订阅方法的方法&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="RxJS observable" scheme="https://annilq.github.io/tags/RxJS-observable/"/>
    
  </entry>
  
  <entry>
    <title>observer pattern小记</title>
    <link href="https://annilq.github.io/2017/10/11/observable-pattern/"/>
    <id>https://annilq.github.io/2017/10/11/observable-pattern/</id>
    <published>2017-10-11T13:48:01.000Z</published>
    <updated>2018-05-21T13:01:33.717Z</updated>
    
    <content type="html"><![CDATA[<p>原文<a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript" target="_blank" rel="noopener">Learning JavaScript Design Patterns</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Observer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.update = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">11</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Subject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.observers = <span class="keyword">new</span> ObserverList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Subject.prototype.addObserver = <span class="function"><span class="keyword">function</span>(<span class="params">observer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.observers.add(observer);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Subject.prototype.removeObserver = <span class="function"><span class="keyword">function</span>(<span class="params">observer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.observers.removeAt(<span class="keyword">this</span>.observers.indexOf(observer, <span class="number">0</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Subject.prototype.notify = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> observerCount = <span class="keyword">this</span>.observers.count();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; observerCount; i++) &#123;</span><br><span class="line">    <span class="keyword">this</span>.observers.get(i).update(context);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ObserverList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.observerList = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ObserverList.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.observerList.push(obj);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ObserverList.prototype.count = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.observerList.length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ObserverList.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (index &gt; <span class="number">-1</span> &amp;&amp; index &lt; <span class="keyword">this</span>.observerList.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.observerList[index];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ObserverList.prototype.indexOf = <span class="function"><span class="keyword">function</span>(<span class="params">obj, startIndex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = startIndex;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt; <span class="keyword">this</span>.observerList.length) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.observerList[i] === obj) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ObserverList.prototype.removeAt = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.observerList.splice(index, <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Subjectobj = <span class="keyword">new</span> Subject();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Concrete Observer</span></span><br><span class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> Observer();</span><br><span class="line">observer.update = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Subjectobj.addObserver(observer);</span><br><span class="line"></span><br><span class="line">Subjectobj.notify(<span class="string">"notify"</span>);</span><br><span class="line">Subjectobj.notify(<span class="string">"notify~~~~~~~~~~"</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文&lt;a href=&quot;https://addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lea
      
    
    </summary>
    
    
      <category term="javascript pattern" scheme="https://annilq.github.io/tags/javascript-pattern/"/>
    
  </entry>
  
  <entry>
    <title>简单的promise实现</title>
    <link href="https://annilq.github.io/2017/10/11/Promise/"/>
    <id>https://annilq.github.io/2017/10/11/Promise/</id>
    <published>2017-10-11T13:40:01.000Z</published>
    <updated>2018-05-21T13:01:33.708Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://medium.com/gitconnected/understand-javascript-promises-by-building-a-promise-from-scratch-84c0fd855720" target="_blank" rel="noopener">Learn JavaScript Promises by Building a Promise from Scratch</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PromiseSimple</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(executionFunction) &#123;</span><br><span class="line">    <span class="keyword">this</span>.promiseChain = [];</span><br><span class="line">    <span class="keyword">this</span>.handleError = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.onResolve = <span class="keyword">this</span>.onResolve.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.onReject = <span class="keyword">this</span>.onReject.bind(<span class="keyword">this</span>);</span><br><span class="line">    executionFunction(<span class="keyword">this</span>.onResolve, <span class="keyword">this</span>.onReject);</span><br><span class="line">  &#125;</span><br><span class="line">  then(onResolve) &#123;</span><br><span class="line">    <span class="keyword">this</span>.promiseChain.push(onResolve);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span>(handleError) &#123;</span><br><span class="line">    <span class="keyword">this</span>.handleError = handleError;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  onResolve(value) &#123;</span><br><span class="line">    <span class="keyword">let</span> storedValue = value;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.promiseChain.forEach(<span class="function"><span class="params">nextFunction</span> =&gt;</span> &#123;</span><br><span class="line">        storedValue = nextFunction(storedValue);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">this</span>.promiseChain = [];</span><br><span class="line">      <span class="keyword">this</span>.onReject(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  onReject(error) &#123;</span><br><span class="line">    <span class="keyword">this</span>.handleError(error);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fakeApiBackend</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = &#123;</span><br><span class="line">      username: <span class="string">"treyhuffine"</span>,</span><br><span class="line">      favoriteNumber: <span class="number">42</span>,</span><br><span class="line">      profile: <span class="string">"https://gitconnected.com/treyhuffine"</span></span><br><span class="line">    &#125;; <span class="comment">// Introduce a randomizer to simulate the // the probability of encountering an error</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Math</span>.random() &gt; <span class="number">0.05</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">data</span>: user, <span class="attr">statusCode</span>: <span class="number">200</span> &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> error = &#123;</span><br><span class="line">        statusCode: <span class="number">404</span>,</span><br><span class="line">        message: <span class="string">"Could not find user"</span>,</span><br><span class="line">        error: <span class="string">"Not Found"</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="keyword">const</span> makeApiCall = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> PromiseSimple(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(</span><br><span class="line">      () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> apiResponse = <span class="keyword">this</span>.fakeApiBackend();</span><br><span class="line">        <span class="keyword">if</span> (apiResponse.statusCode &gt;= <span class="number">400</span>) &#123;</span><br><span class="line">          reject(apiResponse);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(apiResponse.data);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="number">5000</span></span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">makeApiCall()</span><br><span class="line">  .then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"In the first.then()"</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">`User <span class="subst">$&#123;user.username&#125;</span>'s favorite number is <span class="subst">$&#123;user.favoriteNumber&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"The previous.then() told you the favoriteNumber"</span>);</span><br><span class="line">    <span class="keyword">return</span> user.profile;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">profile</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`The profile URL is <span class="subst">$&#123;profile&#125;</span>`</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"This is the last then()"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error.message);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://medium.com/gitconnected/understand-javascript-promises-by-building-a-promise-from-scratch-84c0fd855720&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
      <category term="ES6 promise" scheme="https://annilq.github.io/tags/ES6-promise/"/>
    
  </entry>
  
  <entry>
    <title>ES6 iterator generator 小记</title>
    <link href="https://annilq.github.io/2017/09/28/generator/"/>
    <id>https://annilq.github.io/2017/09/28/generator/</id>
    <published>2017-09-28T13:10:01.000Z</published>
    <updated>2018-05-21T13:01:33.711Z</updated>
    
    <content type="html"><![CDATA[<ol><li>每个迭代器对象都有一个next方法，每次调用这个方法都返回一个含有<code>{done,value}</code>属性的对象</li><li>生成器是一个返回迭代器对象的函数</li><li>可迭代对象具有一个默认迭代器用Symbol.iterator函数属性表示，可以重新定义该函数来添加或者覆盖附属对象的迭代器</li><li>数组，Map，Set中内置了三种迭代器<ol><li>entries()</li><li>values()</li><li>keys()</li></ol></li><li>for-of循环每执行一次都会调用可迭代对象的next()方法并将迭代器返回的结果对象的value值存储在一个变量中，指导返回对象的done值为true</li></ol><h3 id="访问默认迭代器"><a href="#访问默认迭代器" class="headerlink" title="访问默认迭代器"></a>访问默认迭代器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> iterator=arr[<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br></pre></td></tr></table></figure><h3 id="设置迭代器"><a href="#设置迭代器" class="headerlink" title="设置迭代器"></a>设置迭代器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> iter = &#123;</span><br><span class="line">  items: [],</span><br><span class="line">  *[<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">this</span>.items) &#123;</span><br><span class="line">      <span class="keyword">yield</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">iter.items.push(<span class="number">1</span>);</span><br><span class="line">iter.items.push(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> iter) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迭代器处理异步问题"><a href="#迭代器处理异步问题" class="headerlink" title="迭代器处理异步问题"></a>迭代器处理异步问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理同步</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runsync</span>(<span class="params">gen</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> iter = gen();</span><br><span class="line">  <span class="keyword">var</span> result = iter.next();</span><br><span class="line">  <span class="keyword">while</span> (!result.done) &#123;</span><br><span class="line">    result = iter.next(result.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 同步genarator</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">sync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value = <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  value = <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  value = <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理异步promise</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runasygc</span>(<span class="params">gen</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> iter = gen();</span><br><span class="line">  <span class="keyword">var</span> result = iter.next();</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!result.done) &#123;</span><br><span class="line">      result.value.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        result = iter.next(data);</span><br><span class="line">        step(result);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  step(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 异步genarator</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">asygc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value = <span class="keyword">yield</span> timeout(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  value = <span class="keyword">yield</span> timeout(<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  value = <span class="keyword">yield</span> timeout(<span class="number">3</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runsync(sync);</span><br><span class="line">runasygc(sync);</span><br></pre></td></tr></table></figure><p>参考</p><ol><li>深入理解ES6 第八章迭代器与生成器</li><li><a href="http://es6.ruanyifeng.com/#docs/generator-async" target="_blank" rel="noopener">ECMAScript 6 入门 Generator 函数的异步应用</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;每个迭代器对象都有一个next方法，每次调用这个方法都返回一个含有&lt;code&gt;{done,value}&lt;/code&gt;属性的对象&lt;/li&gt;
&lt;li&gt;生成器是一个返回迭代器对象的函数&lt;/li&gt;
&lt;li&gt;可迭代对象具有一个默认迭代器用Symbol.iterator函数
      
    
    </summary>
    
    
      <category term="ES6 generator" scheme="https://annilq.github.io/tags/ES6-generator/"/>
    
  </entry>
  
  <entry>
    <title>建立自己的Redux</title>
    <link href="https://annilq.github.io/2017/07/16/build-your-redux/"/>
    <id>https://annilq.github.io/2017/07/16/build-your-redux/</id>
    <published>2017-07-16T00:53:10.000Z</published>
    <updated>2017-07-25T12:00:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文:<a href="https://zapier.com/engineering/how-to-build-redux/" target="_blank" rel="noopener">Build Yourself a Redux</a></p><h3 id="先来看看没有redux我们怎样建立应用"><a href="#先来看看没有redux我们怎样建立应用" class="headerlink" title="先来看看没有redux我们怎样建立应用"></a>先来看看没有redux我们怎样建立应用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  nextNoteId: <span class="number">1</span>,</span><br><span class="line">  notes: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.state = initialState;</span><br><span class="line"><span class="keyword">const</span> onAddNote = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = <span class="built_in">window</span>.state.nextNoteId;</span><br><span class="line">  <span class="built_in">window</span>.state.notes[id] = &#123;</span><br><span class="line">    id,</span><br><span class="line">    content: <span class="string">""</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">window</span>.state.nextNoteId++;</span><br><span class="line">  renderApp();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> NoteApp = <span class="function">(<span class="params">&#123; notes &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul className=<span class="string">"note-list"</span>&gt;</span><br><span class="line">      &#123;<span class="built_in">Object</span>.keys(notes).map(<span class="function"><span class="params">id</span> =&gt;</span> (</span><br><span class="line">        &lt;li className=<span class="string">"note-list-item"</span> key=&#123;id&#125;&gt;&#123;id&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">      ))&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">    &lt;button className=<span class="string">"editor-button"</span> onClick=&#123;onAddNote&#125;&gt;New Note&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> renderApp = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    &lt;NoteApp notes=&#123;<span class="built_in">window</span>.state.notes&#125; /&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line">renderApp();</span><br></pre></td></tr></table></figure><p><a href="https://jsfiddle.net/justindeal/5j3can1z/1/?utm_source=website&amp;utm_medium=embed&amp;utm_campaign=5j3can1z" target="_blank" rel="noopener">jsfiddle</a></p><h4 id="上面这种方式带来的问题"><a href="#上面这种方式带来的问题" class="headerlink" title="上面这种方式带来的问题"></a>上面这种方式带来的问题</h4><ol><li>任何地方都可以渲染组件,每次state改变都要调用renderApp，会导致UI的故障或者无响应</li><li>流程判断条件可能定义在自不同地方</li><li>无法测试代码，必须要记住整个应用的state才行</li><li>如果出bug了很难定位</li></ol><p>最后重要的一点是如果你想缩小你的app功能，你可能要改很多地方</p><h3 id="现在准备建立自己的Redux"><a href="#现在准备建立自己的Redux" class="headerlink" title="现在准备建立自己的Redux"></a>现在准备建立自己的Redux</h3><p>redux 涉及的三个概念</p><ol><li>reducer</li><li>store(state)</li><li>action</li></ol><h4 id="1-先看看Reducer"><a href="#1-先看看Reducer" class="headerlink" title="1. 先看看Reducer"></a>1. 先看看Reducer</h4><ol><li>reducer函数接收一个state和action，返回一个新的state</li><li>reducer是一个纯函数<br>使用reducer<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = initialState, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> CREATE_NOTE: &#123;</span><br><span class="line">      <span class="comment">// DO NOT MUTATE STATE LIKE THIS!!!</span></span><br><span class="line">      state.notes[state.nextNoteId] = &#123;</span><br><span class="line">        id: state.nextNoteId,</span><br><span class="line">        content: <span class="string">""</span></span><br><span class="line">      &#125;;</span><br><span class="line">      state.nextNoteId++;</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> UPDATE_NOTE: &#123;</span><br><span class="line">      <span class="comment">// DO NOT MUTATE STATE LIKE THIS!!!</span></span><br><span class="line">      state.notes[action.id].content = action.content;</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> state0 = reducer(<span class="literal">undefined</span>, &#123;</span><br><span class="line">  type: CREATE_NOTE</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   nextNoteId: 2,</span></span><br><span class="line"><span class="comment">//   notes: &#123;</span></span><br><span class="line"><span class="comment">//     1: &#123;</span></span><br><span class="line"><span class="comment">//       id: 1,</span></span><br><span class="line"><span class="comment">//       content: ''</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">const</span> state1  = reducer(state0, &#123;</span><br><span class="line">  type: UPDATE_NOTE,</span><br><span class="line">  id: <span class="number">1</span>,</span><br><span class="line">  content: <span class="string">'Hello, world!'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   nextNoteId: 2,</span></span><br><span class="line"><span class="comment">//   notes: &#123;</span></span><br><span class="line"><span class="comment">//     1: &#123;</span></span><br><span class="line"><span class="comment">//       id: 1,</span></span><br><span class="line"><span class="comment">//       content: 'Hello, world!'</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></li></ol><p>上面就是redux的核心代码，一个函数接收一个state和action，返回一个新的state，至于为什么要叫reducer，因为他可以直接用于reduce function中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = [</span><br><span class="line">  &#123;<span class="attr">type</span>: CREATE_NOTE&#125;,</span><br><span class="line">  &#123;<span class="attr">type</span>: UPDATE_NOTE, <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">content</span>: <span class="string">'Hello, world!'</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> state = actions.reduce(reducer, <span class="literal">undefined</span>);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   nextNoteId: 2,</span></span><br><span class="line"><span class="comment">//   notes: &#123;</span></span><br><span class="line"><span class="comment">//     1: &#123;</span></span><br><span class="line"><span class="comment">//       id: 1,</span></span><br><span class="line"><span class="comment">//       content: 'Hello, world!'</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="2-再来看看store"><a href="#2-再来看看store" class="headerlink" title="2. 再来看看store"></a>2. 再来看看store</h4><p>store 会保存我们的state并且还有一些设置和获取state的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> validateAction = <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!action || <span class="keyword">typeof</span> action !== <span class="string">'object'</span> || <span class="built_in">Array</span>.isArray(action)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Action must be an object!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> action.type === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Action must have a type!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> state = <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    dispatch: <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">      validateAction(action)</span><br><span class="line">      state = reducer(state, action);</span><br><span class="line">    &#125;,</span><br><span class="line">    getState: <span class="function"><span class="params">()</span> =&gt;</span> state</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>现在我们使用一下store<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Pass in the reducer we made earlier.</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer);</span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: CREATE_NOTE</span><br><span class="line">&#125;);</span><br><span class="line">store.getState();</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   nextNoteId: 2,</span></span><br><span class="line"><span class="comment">//   notes: &#123;</span></span><br><span class="line"><span class="comment">//     1: &#123;</span></span><br><span class="line"><span class="comment">//       id: 1,</span></span><br><span class="line"><span class="comment">//       content: ''</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></p><p>它仍然缺少一个重要的一点：一种订阅更改的方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createStore = <span class="function"><span class="params">reducer</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> state;</span><br><span class="line">  <span class="keyword">const</span> subscribers = [];</span><br><span class="line">  <span class="keyword">const</span> store = &#123;</span><br><span class="line">    dispatch: <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">      validateAction(action);</span><br><span class="line">      state = reducer(state, action);</span><br><span class="line">      subscribers.forEach(<span class="function"><span class="params">handler</span> =&gt;</span> handler());</span><br><span class="line">    &#125;,</span><br><span class="line">    getState: <span class="function"><span class="params">()</span> =&gt;</span> state,</span><br><span class="line">    subscribe: <span class="function"><span class="params">handler</span> =&gt;</span> &#123;</span><br><span class="line">      subscribers.push(handler);</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// for unsubcribe</span></span><br><span class="line">        <span class="keyword">const</span> index = subscribers.indexOf(handler);</span><br><span class="line">        <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          subscribers.splice(index, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  store.dispatch(&#123;<span class="attr">type</span>: <span class="string">'@@redux/INIT'</span>&#125;);</span><br><span class="line">  <span class="keyword">return</span> store;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><a href="https://jsfiddle.net/justindeal/8cpu4ydj/3/?utm_source=website&amp;utm_medium=embed&amp;utm_campaign=8cpu4ydj" target="_blank" rel="noopener">jsfiddle demo</a></p><h4 id="3-回想下你是怎样用redux的，大概是下面这样吧"><a href="#3-回想下你是怎样用redux的，大概是下面这样吧" class="headerlink" title="3. 回想下你是怎样用redux的，大概是下面这样吧"></a>3. 回想下你是怎样用redux的，大概是下面这样吧</h4><ol><li>首先定义一个pure component</li><li>然后为他再包装一个container<br>我们自己定义的redux是将store传到container中，再将方法传递下去</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> validateAction = <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!action || <span class="keyword">typeof</span> action !== <span class="string">'object'</span> || <span class="built_in">Array</span>.isArray(action)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Action must be an object!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> action.type === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Action must have a type!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createStore = <span class="function"><span class="params">reducer</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> state;</span><br><span class="line">  <span class="keyword">const</span> subscribers = [];</span><br><span class="line">  <span class="keyword">const</span> store = &#123;</span><br><span class="line">    dispatch: <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">      validateAction(action);</span><br><span class="line">      state = reducer(state, action);</span><br><span class="line">      subscribers.forEach(<span class="function"><span class="params">handler</span> =&gt;</span> handler());</span><br><span class="line">    &#125;,</span><br><span class="line">    getState: <span class="function"><span class="params">()</span> =&gt;</span> state,</span><br><span class="line">    subscribe: <span class="function"><span class="params">handler</span> =&gt;</span> &#123;</span><br><span class="line">      subscribers.push(handler);</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> index = subscribers.indexOf(handler);</span><br><span class="line">        <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          subscribers.splice(index, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  store.dispatch(&#123;<span class="attr">type</span>: <span class="string">'@@redux/INIT'</span>&#125;);</span><br><span class="line">  <span class="keyword">return</span> store;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//////////////////////</span></span><br><span class="line"><span class="comment">// Our action types //</span></span><br><span class="line"><span class="comment">//////////////////////</span></span><br><span class="line"><span class="keyword">const</span> CREATE_NOTE = <span class="string">'CREATE_NOTE'</span>;</span><br><span class="line"><span class="keyword">const</span> UPDATE_NOTE = <span class="string">'UPDATE_NOTE'</span>;</span><br><span class="line"><span class="keyword">const</span> OPEN_NOTE = <span class="string">'OPEN_NOTE'</span>;</span><br><span class="line"><span class="keyword">const</span> CLOSE_NOTE = <span class="string">'CLOSE_NOTE'</span>;</span><br><span class="line"><span class="comment">/////////////////</span></span><br><span class="line"><span class="comment">// Our reducer //</span></span><br><span class="line"><span class="comment">/////////////////</span></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  nextNoteId: <span class="number">1</span>,</span><br><span class="line">  notes: &#123;&#125;,</span><br><span class="line">  openNoteId: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = initialState, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> CREATE_NOTE: &#123;</span><br><span class="line">      <span class="keyword">const</span> id = state.nextNoteId;</span><br><span class="line">      <span class="keyword">const</span> newNote = &#123;</span><br><span class="line">        id,</span><br><span class="line">        content: <span class="string">''</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        nextNoteId: id + <span class="number">1</span>,</span><br><span class="line">        openNoteId: id,</span><br><span class="line">        notes: &#123;</span><br><span class="line">          ...state.notes,</span><br><span class="line">          [id]: newNote</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> UPDATE_NOTE: &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;id, content&#125; = action;</span><br><span class="line">      <span class="keyword">const</span> editedNote = &#123;</span><br><span class="line">        ...state.notes[id],</span><br><span class="line">        content</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        notes: &#123;</span><br><span class="line">          ...state.notes,</span><br><span class="line">          [id]: editedNote</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> OPEN_NOTE: &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        openNoteId: action.id</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> CLOSE_NOTE: &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        openNoteId: <span class="literal">null</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">///////////////</span></span><br><span class="line"><span class="comment">// Our store //</span></span><br><span class="line"><span class="comment">///////////////</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer);</span><br><span class="line"><span class="comment">////////////////////</span></span><br><span class="line"><span class="comment">// Our components //</span></span><br><span class="line"><span class="comment">////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> NoteEditor = <span class="function">(<span class="params">&#123;note, onChangeNote, onCloseNote&#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;textarea</span><br><span class="line">        className=<span class="string">"editor-content"</span></span><br><span class="line">        autoFocus</span><br><span class="line">        value=&#123;note.content&#125;</span><br><span class="line">        onChange=&#123;event =&gt;</span><br><span class="line">          onChangeNote(note.id, event.target.value)</span><br><span class="line">        &#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button className="editor-button" onClick=&#123;onCloseNote&#125;&gt;</span></span><br><span class="line"><span class="regexp">      Close</span></span><br><span class="line"><span class="regexp">    &lt;/</span>button&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">const NoteTitle = (&#123;note&#125;) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  const title = note.content</span></span><br><span class="line"><span class="regexp">    .split('\n')[0].replace(/</span>^\s+|\s+$/g, <span class="string">''</span>);</span><br><span class="line">  <span class="keyword">if</span> (title === <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">i</span>&gt;</span>Untitled<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> NoteLink = <span class="function">(<span class="params">&#123;note, onOpenNote&#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;li className=<span class="string">"note-list-item"</span>&gt;</span><br><span class="line">    &lt;a href=<span class="string">"#"</span> onClick=&#123;() =&gt; onOpenNote(note.id)&#125;&gt;</span><br><span class="line">      &lt;NoteTitle note=&#123;note&#125;/&gt;</span><br><span class="line">    &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>li&gt;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> NoteList = <span class="function">(<span class="params">&#123;notes, onOpenNote&#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;ul className=<span class="string">"note-list"</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">Object</span>.keys(notes).map(<span class="function"><span class="params">id</span> =&gt;</span></span><br><span class="line">        &lt;NoteLink</span><br><span class="line">          key=&#123;id&#125;</span><br><span class="line">          note=&#123;notes[id]&#125;</span><br><span class="line">          onOpenNote=&#123;onOpenNote&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">const NoteApp = (&#123;</span></span><br><span class="line"><span class="regexp">  notes, openNoteId, onAddNote, onChangeNote,</span></span><br><span class="line"><span class="regexp">  onOpenNote, onCloseNote</span></span><br><span class="line"><span class="regexp">&#125;) =&gt; (</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &#123;</span></span><br><span class="line"><span class="regexp">      openNoteId ?</span></span><br><span class="line"><span class="regexp">        &lt;NoteEditor</span></span><br><span class="line"><span class="regexp">          note=&#123;notes[openNoteId]&#125;</span></span><br><span class="line"><span class="regexp">          onChangeNote=&#123;onChangeNote&#125;</span></span><br><span class="line"><span class="regexp">          onCloseNote=&#123;onCloseNote&#125;</span></span><br><span class="line"><span class="regexp">        /</span>&gt; :</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;NoteList</span><br><span class="line">            notes=&#123;notes&#125;</span><br><span class="line">            onOpenNote=&#123;onOpenNote&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">          &#123;</span><br><span class="line">            &lt;button</span><br><span class="line">              className=<span class="string">"editor-button"</span></span><br><span class="line">              onClick=&#123;onAddNote&#125;</span><br><span class="line">            &gt;</span><br><span class="line">              New Note</span><br><span class="line">            &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">class NoteAppContainer extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  constructor(props) &#123;</span></span><br><span class="line"><span class="regexp">    super();</span></span><br><span class="line"><span class="regexp">    this.state = props.store.getState();</span></span><br><span class="line"><span class="regexp">    this.onAddNote = this.onAddNote.bind(this);</span></span><br><span class="line"><span class="regexp">    this.onChangeNote = this.onChangeNote.bind(this);</span></span><br><span class="line"><span class="regexp">    this.onOpenNote = this.onOpenNote.bind(this);</span></span><br><span class="line"><span class="regexp">    this.onCloseNote = this.onCloseNote.bind(this);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  componentWillMount() &#123;</span></span><br><span class="line"><span class="regexp">    this.unsubscribe = this.props.store.subscribe(() =&gt;</span></span><br><span class="line"><span class="regexp">      this.setState(this.props.store.getState())</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  componentWillUnmount() &#123;</span></span><br><span class="line"><span class="regexp">    this.unsubscribe();</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  onAddNote() &#123;</span></span><br><span class="line"><span class="regexp">    this.props.store.dispatch(&#123;</span></span><br><span class="line"><span class="regexp">      type: CREATE_NOTE</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  onChangeNote(id, content) &#123;</span></span><br><span class="line"><span class="regexp">    this.props.store.dispatch(&#123;</span></span><br><span class="line"><span class="regexp">      type: UPDATE_NOTE,</span></span><br><span class="line"><span class="regexp">      id,</span></span><br><span class="line"><span class="regexp">      content</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  onOpenNote(id) &#123;</span></span><br><span class="line"><span class="regexp">    this.props.store.dispatch(&#123;</span></span><br><span class="line"><span class="regexp">      type: OPEN_NOTE,</span></span><br><span class="line"><span class="regexp">      id</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  onCloseNote() &#123;</span></span><br><span class="line"><span class="regexp">    this.props.store.dispatch(&#123;</span></span><br><span class="line"><span class="regexp">      type: CLOSE_NOTE</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;NoteApp</span></span><br><span class="line"><span class="regexp">        &#123;...this.state&#125;</span></span><br><span class="line"><span class="regexp">        onAddNote=&#123;this.onAddNote&#125;</span></span><br><span class="line"><span class="regexp">        onChangeNote=&#123;this.onChangeNote&#125;</span></span><br><span class="line"><span class="regexp">        onOpenNote=&#123;this.onOpenNote&#125;</span></span><br><span class="line"><span class="regexp">        onCloseNote=&#123;this.onCloseNote&#125;</span></span><br><span class="line"><span class="regexp">      /</span>&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;NoteAppContainer store=&#123;store&#125;/&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol><li>将store与component连接起来</li><li>container里面做了很多重复的工作（subscribe,unsubscribe,function binding)</li><li>每次都会用到全局的store都要传递</li></ol><h4 id="现在我们试试实现一个redux的provider"><a href="#现在我们试试实现一个redux的provider" class="headerlink" title="现在我们试试实现一个redux的provider"></a>现在我们试试实现一个redux的provider</h4><p>Provider组件使用React的上下文功能将storeprop转换为context属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Provider</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  getChildContext() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      store: <span class="keyword">this</span>.props.store</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.children;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Provider.childContextTypes = &#123;</span><br><span class="line">  store: PropTypes.object</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>有了store，下面用connect函数我们把context上面的props传递到组件中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> connect = (</span><br><span class="line">  mapStateToProps = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;&#125;),</span><br><span class="line">  mapDispatchToProps = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;&#125;)</span><br><span class="line">) =&gt; <span class="function"><span class="params">Component</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Connected</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    onStoreOrPropsChange(props) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;store&#125; = <span class="keyword">this</span>.context;</span><br><span class="line">      <span class="keyword">const</span> state = store.getState();</span><br><span class="line">      <span class="keyword">const</span> stateProps = mapStateToProps(state, props);</span><br><span class="line">      <span class="keyword">const</span> dispatchProps = mapDispatchToProps(store.dispatch, props);</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        ...stateProps,</span><br><span class="line">        ...dispatchProps</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillMount() &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;store&#125; = <span class="keyword">this</span>.context;</span><br><span class="line">      <span class="keyword">this</span>.onStoreOrPropsChange(<span class="keyword">this</span>.props);</span><br><span class="line">      <span class="keyword">this</span>.unsubscribe = store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.onStoreOrPropsChange(<span class="keyword">this</span>.props));</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">      <span class="keyword">this</span>.onStoreOrPropsChange(nextProps);</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">      <span class="keyword">this</span>.unsubscribe();</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...this.props</span>&#125; &#123;<span class="attr">...this.state</span>&#125;/&gt;</span>;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  Connected.contextTypes = &#123;</span></span><br><span class="line"><span class="xml">    store: PropTypes.object</span></span><br><span class="line"><span class="xml">  &#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  return Connected;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></p><ol><li>connect函数接收两个参数mapStateToProps，mapDispatchToProps，返回一个新的函数</li><li>新的函数使用带包装的子组件作为参数，将子组件需要的state以及dispatch，作为当前组件的state</li><li>将当前组件的state作为props传递给需要包装的子组件</li></ol><p><a href="https://jsfiddle.net/justindeal/o27j5zs1/1/?utm_source=website&amp;utm_medium=embed&amp;utm_campaign=o27j5zs1" target="_blank" rel="noopener">fiddle demo</a></p><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><p>目前我们的redux还不能应付异步action的问题，利用中间件可以解决这个问题，加载单个中间件的代码如下所示<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer, middleware</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> state;</span><br><span class="line">  <span class="keyword">const</span> subscribers = [];</span><br><span class="line">  <span class="keyword">const</span> coreDispatch = <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">    validateAction(action);</span><br><span class="line">    state = reducer(state, action);</span><br><span class="line">    subscribers.forEach(<span class="function"><span class="params">handler</span> =&gt;</span> handler());</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> state;</span><br><span class="line">  <span class="keyword">const</span> store = &#123;</span><br><span class="line">    dispatch: coreDispatch,</span><br><span class="line">    getState,</span><br><span class="line">    subscribe: <span class="function"><span class="params">handler</span> =&gt;</span> &#123;</span><br><span class="line">      subscribers.push(handler);</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> index = subscribers.indexOf(handler)</span><br><span class="line">        <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          subscribers.splice(index, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="comment">// 判断时候有中间件</span></span><br><span class="line">  <span class="keyword">if</span> (middleware) &#123;</span><br><span class="line">    <span class="keyword">const</span> dispatch = <span class="function"><span class="params">action</span> =&gt;</span> store.dispatch(action);</span><br><span class="line"><span class="comment">// 实际执行顺序是当store.dispatch 被调用的时候先执行中间件里面的内容，执行之后再dispatch action</span></span><br><span class="line">    store.dispatch = middleware(&#123;</span><br><span class="line">      dispatch,</span><br><span class="line">      getState</span><br><span class="line">    &#125;)(coreDispatch);</span><br><span class="line">  &#125;</span><br><span class="line">  coreDispatch(&#123;<span class="attr">type</span>: <span class="string">'@@redux/INIT'</span>&#125;);</span><br><span class="line">  <span class="keyword">return</span> store;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>thunkMiddleware<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> thunkMiddleware = <span class="function">(<span class="params">&#123;dispatch, getState&#125;</span>) =&gt;</span> next =&gt; <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> action(&#123;dispatch, getState&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> next(action);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>ps:上面关于中间件代码不是很好理解可以参考<br><a href="https://zhuanlan.zhihu.com/p/21391101" target="_blank" rel="noopener">理解 redux 中间件</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文:&lt;a href=&quot;https://zapier.com/engineering/how-to-build-redux/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Build Yourself a Redux&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;先来看
      
    
    </summary>
    
    
      <category term="Redux" scheme="https://annilq.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>ES6 async／await 小记</title>
    <link href="https://annilq.github.io/2017/07/02/async/"/>
    <id>https://annilq.github.io/2017/07/02/async/</id>
    <published>2017-07-02T13:48:01.000Z</published>
    <updated>2018-02-01T12:50:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>async await 基于promise</p><ol><li>async function 创建之后立即返回一个promise对象</li><li>await 关键字只能在async function 中，后面跟着的操作的返回值可以是promise对象也可以是原始值,如果事原始值等于事同步操作</li><li>async function return的值等于async function返回的promise对象resolve的值</li><li>互相不依赖的async function可以用promise.all来将所有的操作一起await<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步操作</span></span><br><span class="line"><span class="keyword">var</span> sleep = <span class="function"><span class="keyword">function</span>(<span class="params">para</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> para + <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 异步操作</span></span><br><span class="line"><span class="keyword">var</span> sleep2 = <span class="function"><span class="keyword">function</span>(<span class="params">para</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        resolve(para * para);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="number">2000</span></span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 互相依赖</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncSleep</span>(<span class="params">para</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result1 = <span class="keyword">await</span> sleep(para);</span><br><span class="line">  <span class="keyword">var</span> result2 = <span class="keyword">await</span> sleep2(result1);</span><br><span class="line">  <span class="keyword">var</span> result3 = <span class="keyword">await</span> sleep2(result2);</span><br><span class="line">  <span class="keyword">return</span> result3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 互相不依赖的function</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncSleep2</span>(<span class="params">para</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result1 = <span class="keyword">await</span> sleep(para);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">Promise</span>.all([sleep2(result1), sleep2(<span class="number">2</span>)]);</span><br><span class="line">&#125;</span><br><span class="line">asyncSleep(<span class="number">2</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">result2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//result2 is 256</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"asyncSleep"</span>, result2);</span><br><span class="line">&#125;);</span><br><span class="line">asyncSleep2(<span class="number">2</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">[result, result2]</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//16 4</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"asyncSleep2"</span>, result, result2);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><p>参考链接<br><a href="http://es6.ruanyifeng.com/#docs/async" target="_blank" rel="noopener">ECMAScript 6 入门 async 函数</a><br><a href="https://hackernoon.com/6-reasons-why-javascripts-async-await-blows-promises-away-tutorial-c7ec10518dd9" target="_blank" rel="noopener">6 Reasons Why JavaScript’s Async/Await Blows Promises Away</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;async await 基于promise&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;async function 创建之后立即返回一个promise对象&lt;/li&gt;
&lt;li&gt;await 关键字只能在async function 中，后面跟着的操作的返回值可以是promise对象也可以是原始
      
    
    </summary>
    
    
      <category term="async await promise" scheme="https://annilq.github.io/tags/async-await-promise/"/>
    
  </entry>
  
  <entry>
    <title>nodejs小记</title>
    <link href="https://annilq.github.io/2017/04/09/nodejs/"/>
    <id>https://annilq.github.io/2017/04/09/nodejs/</id>
    <published>2017-04-09T15:05:01.000Z</published>
    <updated>2017-11-29T12:34:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下面是一个客户端发起请求服务器响应请求的案例"><a href="#下面是一个客户端发起请求服务器响应请求的案例" class="headerlink" title="下面是一个客户端发起请求服务器响应请求的案例"></a>下面是一个客户端发起请求服务器响应请求的案例</h3><p>server.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (req.method == <span class="string">"POST"</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"POST"</span>);</span><br><span class="line">      <span class="keyword">var</span> body = <span class="string">""</span>;</span><br><span class="line">      req.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        body += data;</span><br><span class="line">        <span class="built_in">console</span>.log(body);</span><br><span class="line">      &#125;);</span><br><span class="line">      req.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Body: "</span> + body);</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">        res.end(body);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"GET"</span>);</span><br><span class="line">      res.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">      res.end(<span class="string">"get"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>, <span class="string">"127.0.0.1"</span>);</span><br></pre></td></tr></table></figure></p><p>client.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">"querystring"</span>);</span><br><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">name</span>: <span class="string">"annilq"</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  hostname: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">  port: <span class="number">3000</span>,</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">  path: <span class="string">"/"</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line">    <span class="string">"Content-Length"</span>: Buffer.byteLength(querystring.stringify(data))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> req = http.request(options, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"statusCode"</span>, res.statusCode);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"header"</span>, <span class="built_in">JSON</span>.stringify(res.headers));</span><br><span class="line">  <span class="keyword">var</span> body = <span class="string">""</span>;</span><br><span class="line">  res.setEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">  res.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    body += data;</span><br><span class="line">  &#125;);</span><br><span class="line">  res.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">req.end(querystring.stringify(data));</span><br></pre></td></tr></table></figure></p><h3 id="方法说明"><a href="#方法说明" class="headerlink" title="方法说明"></a>方法说明</h3><ol><li><p>Buffer.byteLength方法返回字符串实际占据的字节长度，默认编码方式为utf8。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Buffer</span><span class="selector-class">.byteLength</span>(<span class="string">'Hello'</span>, <span class="string">'utf8'</span>) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></li><li><p>对象格式化成参数字符串 ,obj就是要格式化的对象,必选参数. [sep]指分隔符 默认&amp; , [eq]指分配符 默认=</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">querystring.stringify(obj, [sep], [eq])</span><br><span class="line">querystring.stringify(&#123; <span class="string">foo:</span> <span class="string">'bar'</span>, <span class="string">baz:</span> [<span class="string">'qux'</span>, <span class="string">'quux'</span>], <span class="string">corge:</span> <span class="string">''</span> &#125;)</span><br><span class="line"><span class="comment">// returns 'foo=bar&amp;baz=qux&amp;baz=quux&amp;corge='</span></span><br><span class="line">querystring.stringify(&#123;<span class="string">foo:</span> <span class="string">'bar'</span>, <span class="string">baz:</span> <span class="string">'qux'</span>&#125;, <span class="string">';'</span>, <span class="string">':'</span>)</span><br><span class="line"><span class="comment">// returns 'foo:bar;baz:qux'</span></span><br></pre></td></tr></table></figure></li></ol><p>需要注意的问题</p><ol><li>server req只有在 client req post 数据时候才能监听到”data” 事件</li><li>client headers指定了错误的 content-length时候，server的req的end事件不会触发<blockquote><p><a href="https://github.com/nodejs/node-v0.x-archive/issues/4200" target="_blank" rel="noopener">request ‘end’ event not called if content-length is incorrect</a></p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;下面是一个客户端发起请求服务器响应请求的案例&quot;&gt;&lt;a href=&quot;#下面是一个客户端发起请求服务器响应请求的案例&quot; class=&quot;headerlink&quot; title=&quot;下面是一个客户端发起请求服务器响应请求的案例&quot;&gt;&lt;/a&gt;下面是一个客户端发起请求服务器响应请求的
      
    
    </summary>
    
    
      <category term="nodejs" scheme="https://annilq.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>js与原生交互</title>
    <link href="https://annilq.github.io/2017/03/27/native/"/>
    <id>https://annilq.github.io/2017/03/27/native/</id>
    <published>2017-03-27T12:50:01.000Z</published>
    <updated>2017-03-27T13:09:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>公司原来的项目是用cordova命令行创建的，页面UI全是web技术画的，目前项目优化将首页以及列表页面用原生重写了，也弃用了之前的cordova架构，但是由于之前页面也需要到与原生交互，我就自己简单写了个方法用来与原生交互<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> NativeUtil = &#123;</span><br><span class="line">  _Callback: &#123;&#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * [调用原生方法]</span></span><br><span class="line"><span class="comment">   * @param  &#123;[type]&#125;   name     [原生方法名]</span></span><br><span class="line"><span class="comment">   * @param  &#123;Function&#125; callback [成功之后的回调]</span></span><br><span class="line"><span class="comment">   * @param  &#123;[type]&#125;   param    [原生插件需要的参数]</span></span><br><span class="line"><span class="comment">   * @return [type]              插件返回值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  use: <span class="function"><span class="keyword">function</span>(<span class="params">name, callback, param</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(args);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>[name]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (args.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> callbackId = <span class="keyword">this</span>._genetateId(name);</span><br><span class="line">        <span class="keyword">this</span>._Callback[callbackId] = callback;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (args.length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>[name](callbackId, param);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args.length == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>[name](callbackId);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args.length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>[name]();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *  生成回调id</span></span><br><span class="line"><span class="comment">   * @param  &#123;[type]&#125; name [调用的原生方法名]</span></span><br><span class="line"><span class="comment">   * @return [type]        [回调id]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _genetateId: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> callbackId;</span><br><span class="line">    callbackId = name + <span class="string">"CB"</span> + (<span class="string">""</span> + <span class="built_in">Date</span>.now()).slice(<span class="number">-7</span>);</span><br><span class="line">    <span class="keyword">return</span> callbackId;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用于原生回调的处理方法</span></span><br><span class="line"><span class="comment">   * @param  &#123;[type]&#125; callbackId [每一个回调会有自己id]</span></span><br><span class="line"><span class="comment">   * @param  &#123;[type]&#125; result     [原生返回的结果]</span></span><br><span class="line"><span class="comment">   * @return [type]              [description]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  NativeCallback: <span class="function"><span class="keyword">function</span>(<span class="params">callbackId, result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._Callback[callbackId]) &#123;</span><br><span class="line">      <span class="keyword">this</span>._Callback[callbackId](result);</span><br><span class="line">      <span class="keyword">delete</span> <span class="keyword">this</span>._Callback[callbackId];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.info(<span class="string">"NativeCallback can't found callbackId"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 选择与上传图片</span></span><br><span class="line"><span class="comment">   * @param  &#123;[type]&#125; callbackId [用于回调]</span></span><br><span class="line"><span class="comment">   * @param  &#123;[type]&#125; num        [可以选几张]</span></span><br><span class="line"><span class="comment">   * @return [type]              [description]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  choosePhoto:<span class="function"><span class="keyword">function</span>(<span class="params">callbackId,num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.jsInterface) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">window</span>.jsInterface.choosePhoto(callbackId,num);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取当前应用版本号</span></span><br><span class="line"><span class="comment">   * @return [type] [description]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  getAppVersion: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.jsInterface) &#123;</span><br><span class="line">      <span class="keyword">var</span> appversion = <span class="built_in">window</span>.jsInterface.getVersionName();</span><br><span class="line">      <span class="keyword">return</span> appversion;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>调用方式<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*异步调用*/</span></span><br><span class="line">NativeUtil.<span class="keyword">use</span>(</span><br><span class="line">  <span class="string">"choosePhoto"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span><span class="params">(data)</span> &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(data)</span><br><span class="line">  &#125;,</span><br><span class="line">  num</span><br><span class="line">);</span><br><span class="line"><span class="comment">/*同步调用*/</span></span><br><span class="line">var appVersion=NativeUtil.<span class="keyword">use</span>(</span><br><span class="line">  <span class="string">"getAppVersion"</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;公司原来的项目是用cordova命令行创建的，页面UI全是web技术画的，目前项目优化将首页以及列表页面用原生重写了，也弃用了之前的cordova架构，但是由于之前页面也需要到与原生交互，我就自己简单写了个方法用来与原生交互&lt;br&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="js与原生交互" scheme="https://annilq.github.io/tags/js%E4%B8%8E%E5%8E%9F%E7%94%9F%E4%BA%A4%E4%BA%92/"/>
    
  </entry>
  
</feed>
